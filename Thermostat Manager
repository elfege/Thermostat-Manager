
definition(
    name: "Thermostat Manager",
    namespace: "elfege",
    author: "ELFEGE",

    description: "Manage your thermostats with contact sensors, motion sensors and boost operations",

    category: "Green Living",
    iconUrl: "https://www.philonyc.com/assets/penrose.jpg",
    iconX2Url: "https://www.philonyc.com/assets/penrose.jpg",
    iconX3Url: "https://www.philonyc.com/assets/penrose.jpg", 
    image: "https://www.philonyc.com/assets/penrose.jpg"
)

preferences {

    page name: "settings"
}
def settings() {

    if(state.paused)
    {
        log.debug "new app label: ${app.label}"
        while(app.label.contains(" (Paused) "))
        {
            app.updateLabel(app.label.minus("(Paused)" ))
        }
        app.updateLabel(app.label + ("<font color = 'red'> (Paused) </font>" ))
    }
    else if(app.label.contains("(Paused)"))
    {
        app.updateLabel(app.label.minus("<font color = 'red'> (Paused) </font>" ))
        while(app.label.contains(" (Paused) ")){app.updateLabel(app.label.minus("(Paused)" ))}
        log.debug "new app label: ${app.label}"
    }

    if(state.paused == true)
    {
        state.button_name = "resume"
        log.debug "button name is: $state.button_name"
    }
    else 
    {
        state.button_name = "pause"
        log.debug "button name is: $state.button_name"
    }

    def pageProperties = [
        name:       "settings",
        title:      "Thermostats and other devices",
        nextPage:   null,
        install: true,
        uninstall: true
    ]

    dynamicPage(pageProperties) {

        section()
        {
            input "pause", "button", title: "$state.button_name"
            paragraph """

"""
        }

        section() {
            label title: "Assign a name", required: false
            input "restricted", "mode", title: "do not run this app while in these modes", multiple: true
        }

        section("Select the thermostat you want to control") { 

            input "thermostat", "capability.thermostat", title: "select a thermostat", required: true, multiple: false, description: null, submitOnChange:true
            input "boost", "bool", title: "boost this device", submitOnChange:true
            if(boost)
            {
                //input "setCmd", "bool", title: "Add a custom command string", submitOnChange:true
                //if(setCmd)
                //{
                //    input "boostMode", "text", title: "Write your command"
                //}
                input "pw", "capability.powerMeter", title:"verify status with a power meter"

            }
            input "heatpump", "bool", title: "$thermostat is a heat pump or I want to add a secondary electric heater", submitOnChange:true
            if(heatpump)
            {
                input "heater", "capability.switch", title: "Select a switch to control an alternate heater", required: true, submitOnChange:true, multiple: false 
                if(heater)
                {
                    input "lowtemp", "number", title: "low temperature threshold", required: true, defaultValue: 30
                }
            }
            input "outsideTemp", "capability.temperatureMeasurement", title: "select a weather sensor for outside temperature", required:true, submitOnChange:true
            input "sensor", "capability.temperatureMeasurement", title: "select a temperature sensor (optional)", submitOnChange:true
            if(!sensor)
            {
                input "offrequiredbyuser", "bool", title: "turn off thermostat when desired temperature has been reached", defaultValue: false, submitOnChange:true
            }
            input "contact", "capability.contactSensor", title: "Turn off everything when these contacts are open", multiple: true, required: false, submitOnChange:true

            input "dimmer", "capability.switchLevel", title: "Use this dimmer as set point input source", required: true, submitOnChange:true
            if(dimmer)
            {
                input "useAbedSensor", "bool", title: "Use a bed sensor", submitOnChange:true
                if(useAbedSensor)
                {
                    def message = ""

                    input "bedSensorType", "enum", title: "Which type ?", options: ["contact", "button"], submitOnChange:true, required:true
                    if(bedSensorType == "contact")
                    {
                        def s = bedSensorContact?.size() 
                        def i = 0
                        input "bedSensorContact", "capability.contactSensor", title: "When ${!bedSensorContact ? "this contact is" : (s > 1 ? "these contacts are" : "this contacts is")} closed, operate in limited mode", multiple: true, required: false, submitOnChange:true
                        def devivesStr = ""
                        for(s!=0;i<s;i++){
                            devivesStr = devivesStr.length() > 0 ? devivesStr + ", " + bedSensorContact[i].toString() : bedSensorContact[i].toString()
                        } 
                        message = bedSensorContact ? "$app.label will work in limited mode when $devivesStr ${s > 1 ? "are" : "is"} closed and/or ${s > 1 ? "have" : "has"} been closed within 1 minute. Power saving options will not be active" : ""

                    }
                    else if(bedSensorType == "button")
                    {
                        def s = bedSensorButton?.size() 
                        def i = 0
                        input "bedSensorButton", "capability.releasableButton", title: "When ${!bedSensorButton ? "this button is" : (s > 1 ? "these buttons are" : "this button is")} held or pushed, work in limited mode", multiple: true, required: false, submitOnChange:true
                        def devivesStr = ""
                        for(s!=0;i<s;i++){
                            devivesStr = devivesStr.length() > 0 ? devivesStr + ", " + bedSensorButton[i].toString() : bedSensorButton[i].toString()
                        } 
                        message = bedSensorButton ? "$app.label will operate in limited mode when $devivesStr ${s > 1 ? "have" : "has"} been pushed or held within 1 minute. Power saving options will not be active" : ""
                    }
                    paragraph "<div style=\"width:102%;background-color:grey;color:white;padding:4px;font-weight: bold;box-shadow: 1px 2px 2px #bababa;margin-left: -10px\">${message}</div>"
                    def bedDevice = bedSensorType == "contact" ? bedSensorContact : bedSensorButton
                    input "setSpecialTemp", "bool", title: "Keep room at a preset temperature when in $bedDevice is ${bedSensorType == "contact" ? "closed" : "pushed or held"}", submitOnChange:true, defaultValue:false

                    if(setSpecialTemp)
                    {
                        input "specialTemp", "number", title: "Set the desired temperature", required: true
                    }
                }

                input "doorsManagement", "bool", title: "When some doors are open, set points must align with a different dimmer", defaultValue:false, submitOnChange:true
                if(doorsManagement)
                {
                    input "doorsContacts", "capability.contactSensor", title: "select contact sensors", required:true, multiple:true, submitOnChange:true
                    paragraph: "when any of those contacts is open, temperature settings will get the value from a different dimmer" 
                    input "doorDimmer", "capability.switchLevel", title: "select a dimmer", required:true
                    if(useAbedSensor)
                    {
                        input "overrideSimpleMode", "bool", title: "This option overrides simple mode"
                    }
                }
            }
        }
        section("POWER SAVING")
        {
            input "motionSensors", "capability.motionSensor", title: "Save power when there's no motion", required: false, multiple: true, submitOnChange:true

            if(motionSensors)
            {
                input "noMotionTime", "number", title: "after how long?", description: "Time in minutes"
                input "motionmodes", "mode", title: "Consider motion only in these modes", multiple: true, required: true 
            }  

            input "powersavingmode", "mode", title: "Save power when in one of these modes", required: false, multiple: true, submitOnChange: true
            if(powersavingmode)
            {
                input "criticalcold", "number", title: "Set a critical low temperature", required: true
                input "criticalhot", "number", title: "Set a critical high temperature", required: true
            }
        }

        section("Fans and other ways to coold down your home")
        {
            input "controlWindows", "bool", title: "Control some windows", submitOnChange:true
            if(controlWindows)
            {
                input "windows", "capability.switch", title: "Turn on those switches when home needs to cool down, wheather permitting", multiple:true, required: false, submitOnChange: true
                if(windows)
                {
                    input "windowsModes", "mode", title: "Select under which modes $windows can be operated", required:true, multiple:true

                    input "outsidetempwindowsH", "number", title: "Set a temperature below which it's ok to turn on $windows", required: true, submitOnChange: true
                    input "outsidetempwindowsL", "number", title: "Set a temperature below which it's NOT ok to turn on $windows", required: true, submitOnChange: true
                    if(outsidetempwindowsH && outsidetempwindowsL)
                    {
                        paragraph "If outside temperature is between ${outsidetempwindowsL}F & ${outsidetempwindowsH}F, $windows will be used to coold down your place instead of your AC"

                        input "operationTime", "bool", title: "${windows}' operation must stop after a certain time", defaultValue:false, submitOnChange:true
                        if(operationTime)
                        {
                            input "windowsDuration", "number", title: "Set minimum operation time", description: "time in seconds", required: false, submitOnChange:true
                            if(windowsDuration)
                            {
                                paragraph "<div style=\"width:102%;background-color:#1C2BB7;color:red;padding:4px;font-weight: bold;box-shadow: 1px 2px 2px #bababa;margin-left: -10px\">${app.name} will determine duration based on this value and outside temperature. The cooler it is outside, the shorter the duration (the closer the duration will be to the minimum you set here). Recommended value: 10 seconds</div>"
                            }
                            input "maxDuration", "number", title: "Set maximum operation time", description: "time in seconds", required: false, submitOnChange:true

                            input "customCommand", "text", title: "custom command to stop operation (default is 'off()')", required: false, submitOnChange:true

                            if(customCommand)
                            {
                                def cmd = customCommand.contains("()") ? customCommand.minus("()") : customCommand
                                def windowsCmds = windows.findAll{it.hasCommand("${cmd}")}
                                boolean cmdOk = windowsCmds.size() == windows.size()
                                if(!cmdOk)
                                {
                                    paragraph "<div style=\"width:102%;background-color:#1C2BB7;color:red;padding:4px;font-weight: bold;box-shadow: 1px 2px 2px #bababa;margin-left: -10px\">SORRY, THIS COMMAND $customCommand IS NOT SUPPORTED BY AT LEAST ONE OF YOUR DEVICES! Maybe a spelling error? In any case, make sure that each one of them support this command</div>"

                                }
                                else
                                {
                                    paragraph """<div style=\"width:102%;background-color:grey;color:white;padding:4px;font-weight: bold;box-shadow: 1px 2px 2px #bababa;margin-left: -10px\">The command $customCommand is supported by all your devices!</div> """

                                }
                            }

                        }
                    }
                }
            }
        }
        section()
        {
            input "run", "button", title: "RUN"
            input "update", "button", title: "UPDATE"
            input "poll", "button", title: "REFRESH"
            input "polldevices", "bool", title: "Poll devices"
            input "enabledebug", "bool", title: "Debug", submitOnChange:true
            if(enabledebug)
            {
                log.warn "debug enabled"      
                state.EnableDebugTime = now()
                runIn(1800,disablelogging)
                descriptiontext "debug will be disabled in 30 minutes"
            }
            else 
            {
                log.warn "debug disabled"
            }
            input "description", "bool", title: "Description Text", submitOnChange:true

        }
    }
}
def installed() {
    logging("Installed with settings: ${settings}")

    initialize()
}
def updated() {

    log.info "${app.name} updated with settings: $settings"

    unsubscribe()
    unschedule()
    initialize()
}
def initialize(){

    if(enabledebug)
    {
        log.warn "debug enabled"      
        state.EnableDebugTime = now()
        runIn(1800,disablelogging)
        descriptiontext "debug will be disabled in 30 minutes"
    }
    else 
    {
        log.warn "debug disabled"
    }
    state.paused = false
    state.restricted = false
    state.lastNeed = ""
    state.boostVal = 85
    state.boostMode = boostMode

    state.setpointSentByApp = false
    state.openByApp = true
    state.closedByApp = true

    state.boostAttempt = now() as long
        state.offAttempt = now() as long

        state.lastMotionEvent = now() as long
        state.motionEvents = 0

    logging("subscribing to events...")

    //subscribe(location, "mode", ChangedModeHandler) 
    subscribe(thermostat, "temperature", temperatureHandler)
    if(sensor)
    {
        subscribe(sensor, "temperature", temperatureHandler)
    }
    subscribe(dimmer, "level", dimmerHandler)
    descriptiontext "subscribed $dimmer to dimmerHandler"
    subscribe(thermostat, "heatingSetpoint", setPointHandler)
    descriptiontext "subscribed ${thermostat}'s heatingSetpoint to setPointHandler"
    subscribe(thermostat, "coolingSetpoint", setPointHandler)
    descriptiontext "subscribed ${thermostat}'s coolingSetpoint to setPointHandler"

    subscribe(location, "mode", modeChangeHandler)

    if(bedSensorContact)
    {        
        subscribe(bedSensorContact, "contact", contactHandler)
    }
    if(bedSensorButton)
    {
        subscribe(bedSensorButton, "held", holdableButtonHandler)   
        subscribe(bedSensorButton, "pushed", holdableButtonHandler)   
    }
    if(contact)
    {
        subscribe(contact, "contact", contactHandler)
    }
    if(motionSensors)
    {
        subscribe(motion, "motion", motionHandler)
    }

    if(polldevices)
    {
        schedule("0 0/5 * * * ?", Poll)
    }

    schedule("0 0/1 * * * ?", mainloop)


    descriptiontext "INITIALIZATION DONE"

}
/************************************************EVT HANDLERS*********************************************************/
def modeChangeHandler(evt){
    log.debug "$evt.name is now $evt.value"
    state.openByApp = true
    state.closedByApp = true  

    if(evt.value in restricted)
    {
        state.paused = true   
        state.restricted = true
    }
    else if(state.paused == true && state.restricted == true)
    {
        updated()
    }
    mainloop()
}
def appButtonHandler(btn) {
    switch(btn) {
        case "pause":state.paused = !state.paused
        logging("state.paused = $state.paused")
        if(state.paused)
        {
            log.debug "unsuscribing from events..."
            unsubscribe()  
            log.debug "unschedule()..."
            unschedule()
            break
        }
        else
        {
            updated()            
            break
        }
        case "update":
        state.paused = false
        updated()
        break
        case "run":
        if(!state.paused) mainloop()
        break
        case "poll":
        Poll()
        break

    }
}
def contactHandler(evt){
    log.info "$evt.device is $evt.value"
    mainloop()
}
def motionHandler(evt){

    logging("$evt.device is $evt.value")

    if(evt.value == "active")
    {
        mainloop()
    }

}
def temperatureHandler(evt){
    logging("$evt.device returns ${evt.value}F")
    mainloop()
}
def holdableButtonHandler(evt){
    log.debug "$evt.device $evt.name $evt.value"
}
def setPointHandler(evt){

    if(!state.setpointSentByApp)
    {
        descriptiontext "new $evt.name is $evt.value---------------------------------------"

        def currDim = dimmer.currentValue("level")
        def thermMode = thermostat.currentValue("thermostatMode")
        boolean notBoostVal = evt.value.toInteger() != state.boostVal.toInteger()

        // this will be true only if thermostat is heating or cooling; therefore, dimmer won't be adjusted if off 
        // using state.lastNeed == "heat" / "cool" seemed to allow exceptions... 
        boolean correspondingMode = (evt.name == "heatingSetpoint" && thermMode == "heat") || (evt.name == "coolingSetpoint" && thermMode == "cool")

        logging"""
state.setpointSentByApp = $state.setpointSentByApp
Current $dimmer value is $currDim
state.lastNeed = $state.lastNeed   
evt.value = $evt.value   
state.boostVal = ${state.boostVal.toInteger()}  
notBoostVal: ${notBoostVal}"""
        boolean bedsensorclosed = bedSensorIsClosed()
        def desired = getDesired(bedsensorclosed)
        def needData = getNeed(desired, bedsensorclosed)
        def need = needData[1]
        def cmd = "set"+"${needData[0]}"+"ingSetpoint" // "Cool" or "Heat" with a capital letter


        // make sure the therm event is same as current need
        // as to not apply a value from a differentiated thermostat mode (heat set to 75 will modify coolingSP and then trigger an event)

        if(correspondingMode && currDim != evt.value && notBoostVal && state.setpointSentByApp == false) 
        {
            runIn(3, setDimmer, [data:evt.value.toInteger()]) // important to delay this so state.setpointSentByApp doesn't get messed up
        }
        if(!notBoostVal)
        {
            log.warn "BOOST VALUE, not adjusting dimmer"   
        }
        if(!correspondingMode)
        {
            descriptiontext "not updating dimmer because this is $evt.name and last need was $state.lastNeed"
        }
        if(currDim == evt.value)
        {
            descriptiontext "dimmer level ok (${dimmer.currentValue("level")} == ${evt.value}"
        }
    }
    else
    {
        log.warn "event generated by this app, doing nothing"
    }
    state.setpointSentByApp = false // always reset this static/class variable after calling it
    mainloop()
}
def dimmerHandler(evt){
    descriptiontext "new dimmer level is $evt.value"
    //mainloop() // risk of feedback loop
}
def outsideThresDimmerHandler(evt){
    descriptiontext "*********** Outside threshold value is now: $evt.value ***********"
    //mainloop()
}
/************************************************MAIN functions*************************************************/
def mainloop(){

    if(!state.paused)
    {
        boolean bedsensorclosed = bedSensorIsClosed()
        int desired = getDesired(bedsensorclosed)
        def needData = getNeed(desired, bedsensorclosed)
        def need = needData[1]
        def inside = getInsideTemp()
        def currSP = thermostat.currentValue("thermostatSetpoint").toInteger()
        def thermMode = thermostat.currentValue("thermostatMode")
        logging("need is needData[1] = $need")
        def cmd = "set"+"${needData[0]}"+"ingSetpoint" // "Cool" or "Heat" with a capital letter

        if(thermMOde == "auto")
        {
            log.info "OVERRIDE"
            return
        }


        if(enabledebug && now() - state.EnableDebugTime > 1800000)
        {
            descriptiontext "Debug has been up for too long..."
            disablelogging() 
        }

        def therMode = thermostat.currentValue("thermostatMode")
        logging("$thermostat is in $therMode mode 54dfg")

        if(therMode == "off")
        {
            state.boostOk = false
        }
        if(pw)
        {
            logging("$pw power meter returns ${pw.currentValue("power")}Watts")
        }
        if(therMode != "auto")
        {

            state.boostVal = 85

            logging"""
therMode = $therMode currSP = $currSP"
currSP != desired -> ${currSP != desired} -> ${currSP} != ${desired} 
"""

            virtualThermostat(need)


            if(boost && need in ["heat", "cool"])
            {
                logging("BOOST MODE!")

                if(need == "heat")
                {
                    logging("setting state.boostVal to heating boost value")
                    state.boostVal = 85

                }
                else if(need == "cool")
                {
                    logging("setting state.boostVal to cooling boost value")
                    state.boostVal = 66
                }

                logging("state.boostVal = $state.boostVal")
                desired = state.boostVal

                desired = state.boostVal
            }

            if(therMode != need)
            {
                if(need != "off" || (need == "off" && (sensor || offrequiredbyuser)))
                {
                    thermostat.setThermostatMode(need) // set desired mode
                    logging("THERMOSTAT SET TO $need mode (587gf)")
                    if(need == "off")
                    {
                        state.offAttempt = now() as long
                            }
                }
                else 
                {
                    logging("THERMOSTAT stays in $therMode mode")
                }

            }
            else if(need != "off")
            {
                logging("Thermostat already set to $need mode")
            }
            if(need != "off" && currSP.toInteger() != desired)
            {
                if(boost)
                {
                    pauseExecution(2000)
                }
                state.setpointSentByApp = true
                thermostat."${cmd}"(desired)   // set desired temp
                logging("THERMOSTAT SET TO $desired (564fdevrt)")
            }
            else if(need != "off")
            {
                logging("Thermostat already set to $desired")
            }

            if(pw)
            {
                // here we manage possible failure for a thermostat to have received the z-wave/zigbee or http command
                long timeElapsedSinceLastBoost = now() - state.boostAttempt
                long timeElapsedSinceLastOff = now() - state.offAttempt // when device driver returns state off while in fact signal didn't go through
                long threshold = 4 * 60 * 1000 // give it 4 minutes to kick in before attempting new request 
                boolean timeIsUp = timeElapsedSinceLastBoost > threshold
                boolean timeIsUpOff = timeElapsedSinceLastOff > 30000
                boolean pwLow = pw.currentValue("power") < 100 // below 100 watts we assume there's no AC compression nor resistor heat running
                logging("time since last boost Attempt = ${timeElapsedSinceLastBoost/1000} seconds & threshold = ${threshold/1000}sec")
                logging("time since last OFF Attempt = ${timeElapsedSinceLastOff/1000} seconds & threshold = ${30}sec")

                if(boost && timeIsUp && pwLow && need != "off")
                {
                    descriptiontext "$app.label is $thermostat $cmd to its boost value of ${desired}F due to inconsistency in power value"
                    state.boostAttempt = now() as long
                        state.setpointSentByApp = true
                    thermostat."${cmd}"(desired) // set the desired boost temperature value
                }
                else if(timeIsUpOff && need == "off" && !pwLow)
                {
                    log.warn("$thermostat should be off but still draining power, resending cmd")
                    state.offAttempt = now() as long
                        thermostat.setThermostatMode("off")
                    thermostat.off()
                }
                else if((!pwLow &&  need in ["heat", "cool"]) || (need == "off" && pwLow))
                {
                    logging("EVERYTHING OK")
                }
                else 
                {
                    logging("Auto Fix Should Kick in within time threshold")
                }
            }
        }
        else 
        {
            descriptiontext("OVERRIDE MODE--------------")   
        }
    }
}
def setDimmer(int val){
    state.setpointSentByApp = true
    dimmer.setLevel(val) // reverse definition 
    descriptiontext "$dimmer set to $val BY THIS APP"
}
def virtualThermostat(need){
    if(heatpump)
    {
        def outsideTemperature = outsideTemp.currentValue("temperature") // only needed if electric heater here
        logging("outsideTemperature < lowtemp ? ${outsideTemperature < lowtemp}")
        if(need == "heat" && outsideTemperature < lowtemp.toInteger())
        {
            boolean powercap = heater.hasAttribute("power")
            logging("is heater power meter capable? $powercap")
            boolean powerok = powercap ? (heater.currentValue("power") > 100) : true
            logging "$heater power consumption is ${powerok ? "ok" : "not as expected"} ${powercap ? "${heater.currentValue("power")}watts" : ''}"
            if(heater.currentValue("switch") != "on" || !powerok)
            {
                logging("Turning $heater on because outside temperature is currently ${outsideTemperature}°F")
                heater.on()   
            }
            else 
            {
                logging("$heater is on because outside temperature is currently ${outsideTemperature}°F")
            }
        }
        else 
        {


            if(heater.currentValue("switch") != "off")
            {
                logging("Turning $heater off")
                heater.off()
            }
            else 
            {

                logging("$heater already off")
            }
        }
    }
}
/************************************************INPUTS*********************************************************/
def getDesired(bedsensorclosed){
    int desired = 70

    if(bedsensorclosed && setSpecialTemp)
    {
        desired = specialTemp
        if(!overrideSimpleMode)
        {
            return desired
        }
    } 
    if(doorsManagement && doorsContactsAreOpen())
    {
        desired = doorDimmer.currentValue("level")
        def message = "$doorsContacts ${doorsContacts.size() > 1 ? "are":"is"} open. $doorDimmer is the new set point reference ${doorDimmer.currentValue("level")}"
        logging "<div style=\"width:102%;background-color:grey;color:white;padding:4px;font-weight: bold;box-shadow: 1px 2px 2px #bababa;margin-left: -10px\">$message</div>"
    }
    else 
    {
        desired = dimmer.currentValue("level")
    }



    logging("desired temperature is: $desired and current temperature is ${getInsideTemp()}")
    return desired
}
def getNeed(desired, bedSensorContactClosed){

    boolean INpwSavingMode = powersavingmode && location.mode in powersavingmode && !bedSensorContactClosed 
    boolean inWindowsModes = windows && location.mode in windowsModes
    boolean contactClosed = !contactsAreOpen()  
    def outsideThres = getOutsideThershold()
    int outsideTemperature = outsideTemp.currentValue("temperature")
    def need0 = ""
    def need1 = ""
    def need = []
    def amplThreshold = 2
    def inside = getInsideTemp()
    def amplitude = Math.abs(inside - desired)
    def swing = 0.5
    boolean amplitudeTooHigh = amplitude >= amplThreshold // amplitude between inside temp and desired / preventing amplitude paradox during mid-season
    boolean needCool = !bedSensorContactClosed || inWindowsModes ? ((outsideTemperature >= outsideThres || amplitudeTooHigh) && inside > desired + swing) : inside > desired + swing
    boolean needHeat = !bedSensorContactClosed ? ((outsideTemperature < outsideThres || amplitudeTooHigh) && inside < desired - swing) : inside < desired - swing
    boolean motionActive = Active() || bedSensorContactClosed


    if(!INpwSavingMode && contactClosed && motionActive)
    {
        if(needCool || needHeat)
        {
            if(needCool)
            {
                need0 = "Cool"// capital letter for later construction of the setCoolingSetpoint cmd
                need1 = "cool"
                state.lastNeed = need1
                logging("need and state.lastNeed set to ${[need0,need1]}")
            }
            if(needHeat) // heating need supercedes cooling need in order to prevent amplitude paradox
            {
                need0 = "Heat" // capital letter for later construction of the setHeatingSetpoint cmd
                need1 = "heat"
                state.lastNeed = need1
                logging("need and state.lastNeed set  to ${[need0,need1]}")
            }
        }
        else
        {
            need0 = "off"
            need1 = "off"
            logging("need set to OFF")
        }

    }
    else   // POWER SAVING MODE OR NO MOTION OR CONTACTS OPEN     
    { 

        def cause = !motionActive ? "no motion" : (INpwSavingMode ? "power saving mode" : (!contactClosed ? "Contacts Open" : "UNKNOWN CAUSE - SPANK DEVELOPPER"))

        logging """
inside < criticalhot :  ${inside < criticalhot}
inside > criticalcold :  ${inside > criticalcold}

"""        

        need0 = "off"
        need1 = "off"

        if(inside > criticalhot)
        {
            log.warn """<div style=\"width:102%;background-color:red;color:white;padding:4px;font-weight: bold;box-shadow: 1px 2px 2px #bababa;margin-left: -10px\">POWER SAVING MODE EXPCETION: TOO HOT! ($cause)</div>"""
            need0 = "Cool"
            need1 = "cool"
        }
        else if(inside < criticalcold)
        {
            """<div style=\"width:102%;background-color:blue;color:white;padding:4px;font-weight: bold;box-shadow: 1px 2px 2px #bababa;margin-left: -10px\">POWER SAVING MODE EXPCETION: TOO COLD! ($cause)</div>"""
            need0 = "Heat"
            need1 = "heat"
        }
    }


    if(windows && !bedSensorContactClosed)
    {

        def humidity = outsideTemp.currentValue("humidity") 
        def insideHum = thermostat.currentValue("humidity") // backup
        humidity = humidity != null ? humidity : (insideHum != null ? insideHum : 50)
        def humThres = getHumidityThreshold() // linear equation: hum thres varies with outside temp
        boolean tooHumid = humidity >= humThres
        boolean contactCapable = windows.any{it -> it.hasCapability("contact")}//?.size() == windows.size() 
        boolean someAreOff =  contactCapable ? (windows.findAll{it.currentValue("contact") == "closed"}?.size() > 0) : (windows.findAll{it.currentValue("switch") == "off"}?.size() > 0)
        boolean someAreOpen = contactCapable ? (windows.findAll{it.currentValue("contact") == "open"}?.size() > 0) : (windows.findAll{it.currentValue("switch") == "on"}?.size() > 0)
        boolean withinRange = outsideTemperature < outsidetempwindowsH && outsideTemperature > outsidetempwindowsL // stric temp value
        boolean outsideWithinRange = withinRange && !tooHumid // same as withinRange but not too humid 

        state.lastOpeningTime = state.lastOpeningTime ? state.lastOpeningTime : (state.lastOpeningTime = now()) // make sure value is not null
        state.outsideTempAtTimeOfOpening = state.outsideTempAtTimeOfOpening ? state.outsideTempAtTimeOfOpening : outsideTemperature // make sure value is not null
        boolean outsideTempHasDecreased = outsideTemperature < state.outsideTempAtTimeOfOpening - swing // serves mostly to reset opening time stamp
        state.lastOpeningTime = outsideTempHasDecreased ? (state.lastOpeningTime = now()) : state.lastOpeningTime // reset opening time stamp if cooler outside

        state.insideTempAtTimeOfOpening = state.insideTempAtTimeOfOpening ? state.insideTempAtTimeOfOpening : inside // make sure value is not null
        boolean insideTempHasIncreased = inside > state.insideTempAtTimeOfOpening + 1 // serves for windows wider opening + needToClose
        state.widerOpeningDone = (state.widerOpeningDone != null) ? state.widerOpeningDone : (state.widerOpeningDone = false) // make sure value is not null
        boolean openMore = !state.widerOpeningDone && insideTempHasIncreased && someAreOpen

        boolean insideTempIsHopeLess = inside > state.insideTempAtTimeOfOpening + 2 && state.widerOpeningDone

        double lastOpeningTime = (now() - state.lastOpeningTime) / 1000 / 60 
        lastOpeningTime = lastOpeningTime.round(2)
        boolean openSinceLong = lastOpeningTime > 15.0 && someAreOpen // been open for more than 15 minutes

        state.lastClosingTime = state.lastClosingTime ? state.lastClosingTime : (state.lastClosingTime = now()) // make sure value is not null
        double lastClosingTime = (now() - state.lastClosingTime) / 1000 / 60 
        lastClosingTime = lastClosingTime.round(2)
        boolean closedSinceLong = lastClosingTime > 10.0 && someAreClosed // been open for more than 30 minutes
        boolean tooColdInside = inside <= desired - 4
        //closing error management for safety, if cmd didn't go through for whatever reason and temp went too low, force close the windows
        boolean exception = someAreOpen && ((state.closedByApp && now() - lastClosingTime > 30 && tooColdInside) || (!outsideWithinRange && tooColdInside))
        long elapsed = now() - lastClosingTime
        def elapsedseconds = elapsed/1000
        def elapsedminutes = elapsed/1000/60
        if(exception) {log.warn "$windows still open! EMERGENCY CLOSING WILL BE ATTEMPTED"}


        //(inside > desired + (swing +1) && openSinceLong) -> give it a chance to cool down the place
        boolean needToClose  = (inside > desired + (swing +1) && openSinceLong) || insideTempHasIncreased || inside < desired - swing || !outsideWithinRange || insideTempIsHopeLess 
        boolean needToOpen = inside > desired + swing && outsideWithinRange && !needToClose // too hot inside + withinrange (acounting for humidity) and no discrepency

        if(INpwSavingMode)
        {
            outsideWithinRange = outsideTemperature < criticalhot && outsideTemperature > criticalcold
            needToOpen = inside < criticalhot && inside > criticalcold && humidity <= 70 // windows must not open in saving mode if hum is too high to protect electronics 
        }

        logging """<div style=\"width:102%;background-color:green;color:white;padding:4px;font-weight: bold;box-shadow: 1px 2px 2px #bababa;margin-left: -10px\">
**********************WINDOWS************************
inWindowsModes = $inWindowsModes
$windows ${!contactCapable ? "${(windows.size() > 1) ? "have":"has"} contact capability" : "${(windows.size() > 1) ? "don't have":"doesn't have"} contact capability"}
closed: ${windows.findAll{it.currentValue("contact") == "closed"}}
Open: ${windows.findAll{it.currentValue("contact") == "open"}}
state.openByApp = $state.openByApp
state.closedByApp = $state.closedByApp
withinRange (stritcly): $withinRange
outsideWithinRange = $outsideWithinRange [range: $outsidetempwindowsL <> $outsidetempwindowsH]
insideTempHasIncreased = $insideTempHasIncreased
outsideTempHasDecreased = $outsideTempHasDecreased
state.outsideTempAtTimeOfOpening = $state.outsideTempAtTimeOfOpening
state.insideTempAtTimeOfOpening = $state.insideTempAtTimeOfOpening
insideTempIsHopeLess = $insideTempIsHopeLess ${insideTempIsHopeLess ? "temp went from: $state.outsideTempAtTimeOfOpening to $inside" : ""}
amplThreshold = $amplThreshold
needToOpen = $needToOpen
needToClose = $needToClose
someAreOff = $someAreOff
someAreOpen = $someAreOpen
last time windows were OPEN = ${lastOpeningTime < 2 ? "less than 1 minute ago" : (lastOpeningTime < 60 ? "${lastOpeningTime} minutes ago" : (lastOpeningTime < 60*2 ? "${(lastOpeningTime/60).round(2)} hour ago" : "${(lastOpeningTime/60).round(2)} hours ago"))}
last time windows were CLOSED = ${lastClosingTime < 2 ? "less than 1 minute ago" : (lastClosingTime < 60 ? "${lastClosingTime} minutes ago" : (lastClosingTime < 60*2 ? "${(lastClosingTime/60).round(2)} hour ago" : "${(lastClosingTime/60).round(2)} hours ago"))}
humThres = ${humThres}
humidity = ${humidity}%
tooHumid = $tooHumid
openMore = $openMore
state.widerOpeningDone = $state.widerOpeningDone
${needToClose ? "CLOSING WINDOWS BECAUSE: ${(insideTempHasIncreased && openSinceLong ? "insideTempHasIncreased && openSinceLong" : ((inside < desired - swing) ? "inside < desired - $swing" : (!outsideWithinRange ? "!outsideWithinRange" : (insideTempIsHopeLess ? "insideTempIsHopeLess" : (!someAreOpen ? "Already closed" : "UNKNOWN!")))))}":""}
*****************************************************
</div>
"""
        //state.closedByApp = true

        if(inWindowsModes){

            def time = getWindowsTimeOfOperation(outsideTemperature)

            if(needToOpen) // outsideWithinRange and humidity level are accounted for in needToOpen boolean, unless in power saving mode
            {
                descriptiontext "using $windows INSTEAD OF AC"

                if(someAreOff || openMore)
                {
                    if(openMore) {
                        state.widerOpeningDone = true
                        unschedule(stop)
                    }
                    if(state.closedByApp || openMore)
                    {
                        def message = "opening $windows"
                        windows.on()
                        need0 = "off"
                        need1 = "off"
                        if(!openMore)
                        {
                            state.lastOpeningTime = now()
                            state.outsideTempAtTimeOfOpening = outsideTemperature
                            state.insideTempAtTimeOfOpening = inside
                        }
                        state.openByApp = true
                        state.closedByApp = false

                        if(operationTime && !openMore) // if openMore then open in full
                        {
                            runIn(time, stop)
                            message += " for a duration of $time seconds"
                        }
                        log.warn message

                    }
                    else
                    {
                        descriptiontext "$windows were not closed by this app"
                    }

                }
                else
                {
                    descriptiontext "$windows already open"
                }
            }
            else if(someAreOpen)
            {
                if((state.openByApp && needToClose) || exception)
                {
                    log.warn "closing $windows"
                    unschedule(stop)
                    state.lastClosingTime = now() 
                    state.widerOpeningDone = false // simple value reset
                    windows.off()
                    state.openByApp = false
                    state.closedByApp = true
                }
                else if(!state.openByApp && needToClose)
                {
                    descriptiontext "$windows were not open by this app"
                }
                else
                {
                    descriptiontext "$windows may close soon"
                }

            }


        }
        else if(windows && !inWindowsModes)
        {
            logging "outside of windows modes"
            if(someAreOpen && state.openByApp && (inside > desired + 2 || inside < desired - 2 ))
            {
                windows.off()
            }
        }
        else if(windows && bedSensorContactClosed)
        {
            logging "no windows management due to $bedSensorContact"
        }

    }
    else if(bedSensorContactClosed)
    {
        log.warn "<div style=\"width:102%;background-color:grey;color:white;padding:4px;font-weight: bold;box-shadow: 1px 2px 2px #bababa;margin-left: -10px\">Simple mode is active</div>"
    }

    need = [need0, need1]

    logging"""<div style=\"width:102%;background-color:#1C2BB7;color:white;padding:4px;font-weight: bold;box-shadow: 1px 2px 2px #bababa;margin-left: -10px\">
--------------NEED---------------------
inWindowsModes = $inWindowsModes
power saving management= ${powersavingmode ? "$powersavingmode INpwSavingMode = $INpwSavingMode":"option not selected by user"}
amplitude = $amplitude
amplitudeTooHigh = $amplitudeTooHigh
outside = $outsideTemperature
inside = $inside
desired = $desired
contactClosed = $contactClosed
outsideThres = $outsideThres
outsideTemperature > desired = ${outsideTemperature > desired}
outsideTemperature < desired = ${outsideTemperature < desired}
outsideTemperature > outsideThres = ${outsideTemperature > outsideThres}
outsideTemperature < outsideThres = ${outsideTemperature < outsideThres}
inside > desired = ${inside > desired}
inside < desired = ${inside < desired}
needCool = $needCool
needHeat = $needHeat (needHeat supercedes needCool) 
final NEED value = $need
---------------------------------------
</div>
"""
    return need

}
def getWindowsTimeOfOperation(outsideTemperature){

    def max = maxDuration ? maxDuration : 2000

    def y = null // value to find
    def x = outsideTemperature // current temperature outside
    def ya = windowsDuration ? windowsDuration : 10 // minimal duration // coressponding duration for when outside temperature = xa
    def xa = outsidetempwindowsL // minimal operation temperature
    def m = 0.9 // slope / coef

    y = m*(x-xa)+ya // solving y-ya = m*(x-xa)
    y = y < max ? y : max

    logging "linear result for windows duration = ${y.toInteger()} seconds"
    return y.toInteger()
}
def getInsideTemp(){
    def inside = thermostat.currentValue("temperature")
    if(sensor)
    {
        inside = sensor.currentValue("temperature")
    }

    return inside
}
def getOutsideThershold(){

    // define the outside temperature as of which heating or cooling are respectively required 
    // modulated with outside humidity 

    def humidity = outsideTemp.currentValue("humidity") 
    humidity = humidity != null ? humidity : 50 // prevents error from recently installed thermostats
    if(humidity == null){
        def message = """$outsideTemp is not returning any humdity value - it may be because it was just included; if so, this will resolve ont its own.
If this message still shows within an hour, check your thermostat configuration..."""
        log.warn """<div style=\"width:102%;background-color:red;color:white;padding:4px;font-weight: bold;box-shadow: 1px 2px 2px #bababa;margin-left: -10px\">$message</div>"""
    }
    def outsideTemperature = outsideTemp.currentValue("temperature")

    // the higher the humidity, the lower the threshold so cooling can happen 
    def y = null // value to find
    def x = humidity 
    def ya = 60 // coressponding outside temperature value for when humidity = xa 
    def xa = 60 // humidity level
    def m = -0.1 // slope / coef

    y = m*(x-xa)+ya // solving y-ya = m*(x-xa)
    //log.warn "y = $y"
    def result = y > 68 ? 68 : (y < 55 ? 55 : y) // max and min

    descriptiontext "cool/heat decision result = ${y != result ? "$result (coorected from y=$y)" : "$result"} (humidity being ${humidity < 40 ? "low" : "${humidity}%"})"
    return y


}
def getHumidityThreshold(){ // must be called only upon windows opening decision
    def humidity = outsideTemp.currentValue("humidity") 
    humidity = humidity != null ? humidity : 50
    def outsideTemperature = outsideTemp.currentValue("temperature")

    // we want to set a humidity threshold depending on outside temperature
    // humidity of 98, even an outside temp of 70 will feel too warm so we don't open the windows
    // but humidity of 98 at 60F, it's ok to use outside air to cool down the house

    def y = null // value to find
    def x = outsideTemperature 
    def ya = 90 // coressponding humidity threshold for when humidity = xa
    def xa = 60
    def m = -0.9 // slope / coef

    y = m*(x-xa)+ya // solving y-ya = m*(x-xa)

    return y

}
def Poll(){


    boolean thermPoll = thermostat.hasCommand("poll")
    boolean thermRefresh = thermostat.hasCommand("refresh") 


    boolean outsidePoll = outsideTemp.hasCommand("poll")
    boolean outsideRefresh = outsideTemp.hasCommand("refresh")
    boolean override = state.override

    if(thermRefresh){
        thermostat.refresh()
        logging("refreshing $thermostat")
    }
    if(thermPoll){
        thermostat.poll()
        logging("polling $thermostat")
    }
    if(outsideRefresh){
        outsideTemp.refresh()
        logging("refreshing $outsideTemp")
    }
    if(outsidePoll){
        outsideTemp.poll()
        logging("polling $outsideTemp")
    }

    boolean heaterPoll = heater?.hasCommand("poll")
    boolean heaterRefresh = heater?.hasCommand("refresh") 

    if(heaterRefresh){
        heater.refresh()
        logging("refreshing $heater")
    }
    if(heaterPoll){
        heater.poll()
        logging("polling $heater")
    }


    boolean sensorPoll = sensor?.hasCommand("poll")
    boolean sensorRefresh = sensor?.hasCommand("refresh") 

    if(sensorRefresh){
        sensor.refresh()
        logging("refreshing $sensor")
    }
    if(sensorPoll){
        sensor.poll()
        logging("polling $sensor")
    }

    boolean pwPoll = pw?.hasCommand("poll")
    boolean pwRefresh = pw?.hasCommand("refresh") 

    if(pwRefresh){
        pw.refresh()
        logging("refreshing $pw")
    }
    if(pwPoll){
        sensor.poll()
        logging("polling $pw")
    }

}
/************************************************BOOLEANS*********************************************************/
boolean contactsAreOpen(){
    boolean Open = false
    def listOpen = []
    if(contact)
    {
        listOpen = contact?.findAll{it.currentValue("contact") == "open"}
        Open = listOpen.size() > 0
    }

    logging """$contact open ?: ${listOpen}"""
    return Open
}
boolean bedSensorIsClosed(){
    boolean result = false

    if(bedSensorType == "contact")
    {
        def Dtime = 60000
        int s = bedSensorContact.size() 
        int i = 0
        def thisDeviceEvents = []
        int events = 0
        def findClosed = bedSensorContact.findAll{it.currentValue("contact") == "closed"}
        boolean currentlyClosed = findClosed.size() != 0
        //log.warn "AnyCurrentlyActive: $AnyCurrentlyActive"
        if(currentlyClosed) { 
            return true 
        }
        else 
        {
            for(s != 0; i < s; i++) // collect active events
            { 
                thisDeviceEvents = bedSensorContact[i].eventsSince(new Date(now() - Dtime)).findAll{it.value in ["closed", "open"]} // collect ALL motion events for each sensor separately
                events += thisDeviceEvents.size() 
            }
            descriptiontext("$bedSensorContact ${s>1? "were":"was"} closed $events times in the last ${Dtime/1000} seconds")
        }

        result = events > 0
        logging("$bedSensorContact closed ?: $result")
    }
    else if(bedSensorType == "button")
    {
        def Dtime = 60000
        int s = bedSensorButton.size() 
        int i = 0
        def thisDeviceEvents = []
        int events = 0

        log.debug "******${bedSensorButton[i]} state = ${bedSensorButton[i].currentValue("pushed")}"

        for(s != 0; i < s; i++) // collect button events
        { 
            thisDeviceEvents = bedSensorButton[i].eventsSince(new Date(now() - Dtime)).findAll{it.name in ["held", "pushed"]} // collect ALL button events for each sensor separately
            events += thisDeviceEvents.size() 
        }
        descriptiontext("$bedSensorButton ${s>1? "were":"was"} held or pushed $events times in the last ${Dtime/1000} seconds")

        result = events > 0
        logging("$bedSensorButton closed ?: $result")
    }
    return result
}
boolean doorsContactsAreOpen(){
    boolean Open = false
    def listOpen = []
    if(contact)
    {
        listOpen = doorsContacts?.findAll{it.currentValue("contact") == "open"}
        Open = listOpen.size() > 0
    }

    logging """$doorsContacts open ?: ${listOpen}"""
    return Open
}
boolean Active(){
    boolean result = true // default is true  always return Active = true when no sensor is selected by the user


    if(motionSensors)
    {
        long Dtime = noMotionTime * 1000 * 60
        int s = motionSensors.size() 
        int i = 0
        def thisDeviceEvents = []
        int events = 0

        if(location.mode in motionmodes)
        {
            for(s != 0; i < s; i++) // collect active events
            { 
                thisDeviceEvents = motionSensors[i].eventsSince(new Date(now() - Dtime)).findAll{it.value == "active"} // collect motion events for each sensor separately
                events += thisDeviceEvents.size() 
            }
            descriptiontext "$events active events in the last ${noMotionTime} minutes"
            result = events > 0 

        }
        else 
        {
            logging("motion returns true because outside of motion modes")
        }

    }
    else 
    {
        logging("user did not select any motion sensor")
    }
    return result
}
/************************************************OTHER*********************************************************/
def stop(){

    if(customCommand)
    {
        log.warn "$windows $customCommand"
        windows.stop() //"${customCommand}"
    }
    else
    {
        log.warn "$windows off"
        windows.off()
    }
}
def logging(message){
    if(enabledebug)
    {
        log.debug message
    }
    if(state.EnableDebugTime == null) state.EnableDebugTime = now()
}
def descriptiontext(message){
    if(description)
    {
        log.info message
    }
}
def disablelogging(){
    log.warn "debug logging disabled..."
    app.updateSetting("enabledebug",[value:"false",type:"bool"])
}
