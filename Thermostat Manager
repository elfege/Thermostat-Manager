import java.text.SimpleDateFormat

definition(
    name: "Thermostat Manager",
    namespace: "elfege",
    author: "ELFEGE",

    description: "A Trully Smart Thermostat Manager That Can Save You Tons Of Money",

    category: "Green Living",
    iconUrl: "https://www.philonyc.com/assets/penrose.jpg",
    iconX2Url: "https://www.philonyc.com/assets/penrose.jpg",
    iconX3Url: "https://www.philonyc.com/assets/penrose.jpg", 
    image: "https://www.philonyc.com/assets/penrose.jpg"
)
/************************************************SETTINGS*************************************************/
preferences {

    page name: "settings"
    page name: "thermostats"
    page name: "methods"
    page name: "contactsensors"
    page name: "powersaving"
    page name: "comfortSettings"
    page name: "windowsManagement"

}
def settings() {

    pageNameUpdate()   

    def pageProperties = [
        name:       "settings",
        title:      "settings",
        nextPage:   null,
        install: true,
        uninstall: true
    ]

    dynamicPage(pageProperties) {

        section() {
            label title: "Assign a name", required: false
            input "celcius", "bool", title: "Celcius"
        }
        section()
        {
            input "pause", "button", title: "$atomicState.button_name"
            input "buttonPause", "capability.doubleTapableButton", title: "Pause/resume this app when I double tap a button", multiple: true, required: false, submitOnChange:true

            if(buttonPause)
            {
                input "buttonTimer", "number", title: "optional: time limit in minutes", required:false
            }
            input "restricted", "mode", title: "Restricted modes", multiple: true
        }
        section("Main Settings") {
            href "thermostats", title: "Thermostats and other devices", description: ""
            href "methods", title: "Methods of evaluation", description: ""
            href "contactsensors", title: "Power Saving and Contacts Sensors", description: ""
            href "powersaving", title: "Power Saving and Motion", description: ""           
            href "windowsManagement", title: "Power Saving and Windows Control", description: ""
            href "comfortSettings", title: "Comfort Options (bed time)", description: ""

        }
        section("Actions")
        {
            input "run", "button", title: "RUN"
            input "update", "button", title: "UPDATE"
            input "poll", "button", title: "REFRESH SENSORS"
            input "polldevices", "bool", title: "Poll devices"
            input "enabledebug", "bool", title: "Debug", submitOnChange:true
            input "description", "bool", title: "Description Text", submitOnChange:true
            if(enabledebug)
            {
                logging "debug enabled"      
                atomicState.EnableDebugTime = now()
                runIn(1800,disablelogging)

                descriptionText "debug will be disabled in 30 minutes"
            }
            else 
            {
                logging "debug disabled"
            }

            if(description) { 
                atomicState.enableDescriptionTime = now() 
                runIn(86400, disabledescription)
            }

        }
    }
}
def thermostats(){

    def title = formatText("Thermostats, sensors, heaters and coolers", "white", "grey")

    def pageProperties = [
        name:       "thermostats",
        title:      title,
        nextPage:   "settings",
        install: false,
        uninstall: false
    ]

    dynamicPage(pageProperties) {
        section("Select the thermostat you want to control")
        { 
            input "thermostat", "capability.thermostat", title: "select a thermostat", required: true, multiple: false, description: null, submitOnChange:true
            // verify not only capability, but also actual reading, some thermostats working with generic drivers
            // will return true to some capabilities while the hardware won't parse any value
            boolean hasHumidity = thermostat != null && thermostat.hasCapability("RelativeHumidityMeasurement") && thermostat.currentValue("humidity") != null
            log.debug "$thermostat has humidity capability ? $hasHumidity"
            if(thermostat && !hasHumidity && !optionalHumSensor)
            {
                paragraph formatText("""Your thermostat doesn't support humidity measurement (or doesn't return any humidity value). As a consequence, you must select a separate humidity sensor""", "white", "blue")
            }
            if(thermostat && !hasHumidity)
            {
                input "optionalHumSensor", "capability.relativeHumidityMeasurement", title: "Select a humidity sensor", required:false, submitOnChange:true
            }
            input "forceCmd", "bool", title:"Force commands (for old non-Zwave-plus devices that don't refresh their status properly under certain mesh conditions)", defaultValue:false
            input "pw", "capability.powerMeter", title:"verify status with a power meter", required:false
            input "heatpump", "bool", title: "$thermostat is a heat pump", submitOnChange:true
            def mssg = "Because $thermostat is a heatpump, you must select an alternate heater controlled by a switch (see further down). This is due to the fact that a heatpump will not be power efficient under certain weather conditions and temperatures. ${app.label} will make sure the best device is being used when needed"
            if(heatpump){paragraph formatText (mssg, "blue", "white")}
            if(restricted)
            {
                input "restrictedThermMode", "enum", title:"Select default's thermostat operation once your location is in restricted mode", options:["off", "cool", "heat", "auto"], required:false, defaultValue: "off", submitOnChange:true
                if(restrictedThermMode == "auto")
                {
                    paragraph formatText("Beware that 'auto' is the override mode, which means that this app won't be able to control your thermostat until you set your thermostat back to either 'cool', 'heat' or 'off'", "white", "red")
                }
            }
        }    

        section("Select alternate heater and/or cooler")
        {
            boolean heaterRequired = heatpump ? true : false
            if(heaterRequired) 
            {
                paragraph formatText("Alternate heater is mandatory with heat pump option", "red", "white")
            }
            input "heater", "capability.switch", title: "Select a switch to control an alternate heater", required: heaterRequired, submitOnChange:true, multiple: false 
            if(heater)
            {
                input "addLowTemp", "bool", title: "Turn on $heater only if OUTSIDE temperature goes below a certain threshold", submitOnChange:true
                if(heatpump || addLowTemp)
                {
                    input "lowtemp", "number", title: "low temperature threshold", required: true, defaultValue: 30
                }
                if(heater.hasAttribute("power") && pw) // if both are true: power meter cap for heater switch and verify status with power meter
                {
                    input "controlPowerConsumption", "bool", title:"control power consumption", submitOnChange: true, required: false
                    if(controlPowerConsumption)
                    {
                        input "maxPowerConsumption", "number", title: "Set maximum power in watts", submitOnChange:true, required:true
                        input "devicePriority", "enum", options: ["$heater", "$thermostat"], required: true, submitOnChange:true
                        log.warn """
devicePriority = $devicePriority
"""
                        if(pw)
                        {
                            if(pw?.hasCapability("Switch"))
                            {
                                input "controlpwswitch", "bool", title: "Also control $pw as a switch", defaultValue:false, submitOnChange:true
                                if(controlpwswitch)
                                {
                                    paragraph formatText("$pw will be toggled when the app notices that some commands are not going through properly and everytime power consumption is too high. It'll turn it back on $thermostat is needed again", "white", "grey")
                                }
                            }
                        }
                    }
                }
            }


            input "cooler", "capability.switch", title: "Select a switch to control an alternate cooler", required: false, submitOnChange:true, multiple: false 

        }
        section("Sensors")
        {
            input "outsideTemp", "capability.temperatureMeasurement", title: "Required: select a weather sensor for outside temperature", required:true, submitOnChange:true

            input "sensor", "capability.temperatureMeasurement", title: "select a temperature sensor (optional)", submitOnChange:true, multiple:true
            if(sensor)
            {
                input "offrequiredbyuser", "bool", title: "turn off thermostat when desired temperature has been reached", defaultValue: false, submitOnChange:true
            }
        }
        section("Central Thermostat")
        {
            if(thermostat){
                paragraph formatText("Make $thermostat a central thermostat for your home", "white", "blue")
                input "sync", "bool", title:"Synchronize ${thermostat} with states from a different thermostat", defaultValue:false, submitOnChange:true
                if(sync)
                {
                    input "thermostatB", "capability.thermostat", title: "select a second thermostat", required: true, multiple: true, description: null, submitOnChange:true
                    input "ignoreTherModes", "bool", title: "Ignore operating modes, synchronize set points only", defaultValue: false
                }
            }
        }
    }
}
def methods(){

    def title = formatText("METHODS OF EVALUTATION:", "white", "grey")

    def pageProperties = [
        name:       "methods",
        title:      title,
        nextPage:   "settings",
        install: false,
        uninstall: false
    ]

    dynamicPage(pageProperties) {

        section(){
            input "autoOverride", "bool", title:"Pause this app when thermostat mode is 'auto'", submitOnChange: true, defaultValue: false
            if(autoOverride)
            {
                input "overrideDuration", "number", title: "Set a time limit", description: "number in hours, 0 means unlimitted time", submitOnChange:true
            }
            input "method", "enum", title:"select the method you want $app.name to use to adjust your thermostats cooling and heating set points", options:["dimmer","auto"],submitOnChange:true

            //used by both methods
            input "dimmer", "capability.switchLevel", title: "Use this dimmer as set point input source", required: false, submitOnChange:true

            if(method == "auto")
            {
                def reF = outsideTemp ? outsideTemp.currentValue("temperature") : 77
                def des = 2
                def refTempTitle = outsideTemp ? "Set an outside temperature reference (You can leave the current outside temperature: $reF)": "Set an outside temperature reference for which you will set (below) a desired variation (for example: 77)"
                if(outsideTemp) {app.updateSetting("refTemp",[value:reF,type:"number"])}
                if(!refTemp){app.updateSetting("desiredVar",[value:des,type:"number"])}

                input "refTemp", "number", title: refTempTitle, required: false, range: "30..100", submitOnChange:true
                input "desiredVar", "number", title: "Set a desired variation: by how much do you want inside temperature to differ from outside temp when outside temp is $reF?", required:false, range: "1..40", submitOnChange:true
                if(refTemp && desiredVar)
                {
                    log.debug "refTemp = $refTemp desiredVar = $desiredVar"
                    paragraph """ 
In cooling mode, when outside temperature is ${refTemp}F your room will be cooled to ${refTemp.toInteger() - desiredVar.toInteger()}F. Now, based on these reference values, a linear function will apply hereafter (meaning this variation will change proportionally to how hot it gets outside)
In heating mode, the function will work with a different method to make sure to keep you warm """
                }
                input "maxAutoHeat", "number", title: "Highest heating set point", defaultValue: 75
                input "minAutoHeat", "number", title: "Lowest heating set point", defaultValue: 70

                input "minAutoCool", "number", title: "Lowest cooling set point", defaultValue: 70       
                input "maxAutoCool", "number", title: "Highest cooling set point", defaultValue: 77
            }

            input "antifreeze", "bool", title:"Optional: Customize Antifreeze",submitOnChange:true,defaultValue:true
            input "backupSensor", "capability.temperatureMeasurement", title: "Optional but highly recommended: pick a backup sensor (in case of network failure)", required:false

            if(antifreeze)
            {
                input "safeValue", "number", title: "safety temperature", required:true
            }
            input "sendAlert", "bool", title: "Send a sound and/or text notification when temperature goes below antifreeze safety", submitOnChange:true
            if(sendAlert)
            {
                input "speech", "capability.speechSynthesis", title: "Select speech devices", multiple:true, required:false, submitOnChange: true 
                input "musicDevice", "capability.musicPlayer", title: "Select music players", multiple:true, required:false, submitOnChange: true 
                if(musicDevice || speech)
                {
                    input "volumeLevel", "number", title: "Set the volume level", range: "10..100",required:true, submitOnChange: true  
                }
                input "initializeDevices", "bool", title:"Try to fix unresponsive speakers (such as Chrome's)", defaultValue:false
                input "notification", "capability.notification", title: "Select notification devices", multiple:true, required:false, submitOnChange: true 
            }
        }
    }
}
def contactsensors(){

    def title = formatText("CONTACTS AND DOORS", "white", "grey")

    def pageProperties = [
        name:       "contactsensors",
        title:      title,
        nextPage:   "settings",
        install: false,
        uninstall: false
    ]

    dynamicPage(pageProperties) {

        section()
        {
            input "WindowsContact", "capability.contactSensor", title: "Turn off everything when any of these contacts is open", multiple: true, required: false, submitOnChange:true            
            if(WindowsContact)
            {
                input "openDelay", "number", title: "After how long?", description: "Time in seconds", required:true
            }


            input "doorsManagement", "bool", title: "When some doors are open, synchronise $thermostat with a thermostat from another room", defaultValue:false, submitOnChange:true
            if(doorsManagement)
            {
                input "doorsContacts", "capability.contactSensor", title: "select contact sensors", required:true, multiple:true, submitOnChange:true

                input "doorThermostat", "capability.thermostat", title: "select a thermostat from a different room", required:true, submitOnChange:true
                if(doorsContacts && doorThermostat)
                {
                    paragraph "when ${doorsContacts?.size()>1?"any of":""} ${doorsContacts} ${doorsContacts?.size()>1?"are":"is"} open, $thermostat will synchornise with $doorThermostat"
                    if(motionSensors)
                    {
                        input "doorsOverrideMotion", "bool", title: "This option overrides motion based power savings", defaultValue:true, submitOnChange:true
                    }
                    if(UseSimpleMode)
                    {
                        input "overrideSimpleMode", "bool", title: "This option overrides ${simpleModeContact && simpleModeButton ? "$simpleModeContact && $simpleModeButton" : simpleModeButton ? "$simpleModeButton" : "$simpleModeContact" }'s events"

                    }
                    if(doorsContacts)
                    {
                        input "useDifferentSetOfSensors", "bool", title: "Use a different set of temperature sensors when ${doorsContacts} ${doorsContacts.size()>1?"are":"is"} open", submitOnChange:true
                        if(useDifferentSetOfSensors)
                        {
                            input "doorSetOfSensors", "capability.temperatureMeasurement", title: "Select your sensors", multiple:true, submitOnChange:true, required:true
                        }
                    }
                }
            }
        }
    }
}
def powersaving(){

    def title = formatText("POWER SAVING OPTIONS","white", "grey")

    def pageProperties = [
        name:       "powersaving",
        title:      title,
        nextPage:   "settings",
        install: false,
        uninstall: false
    ]

    dynamicPage(pageProperties) {

        section(formatText("Power saving modes", "white", "blue")){
            input "powersavingmode", "mode", title: "Save power when in one of these modes", required: false, multiple: true, submitOnChange: true
        }
        section(formatText("Motion Management", "white", "blue")){
            input "motionSensors", "capability.motionSensor", title: "Save power when there's no motion", required: false, multiple: true, submitOnChange:true

            if(motionSensors)
            {
                input "noMotionTime", "number", title: "after how long?", description: "Time in minutes"
                input "motionmodes", "mode", title: "Consider motion only in these modes", multiple: true, required: true 
            }  

            if(powersavingmode || motionSensors)
            {
                input "criticalcold", "number", title: "Set a critical low temperature", required: true
                input "criticalhot", "number", title: "Set a critical high temperature", required: true
            }
            input "fancirculate", "bool", title:"Run ${thermostat}'s fan circulation when contacts are open and temp is getting too high", defaultValue:true
        }
    }
}
def comfortSettings(){

    def title = formatText("COMFORT SETTINGS","white", "grey")

    def pageProperties = [
        name:       "comfortSettings",
        title:      title,
        nextPage:   "settings",
        install: false,
        uninstall: false
    ]
    dynamicPage(pageProperties) {
        section(formatText("Simple comfort mode", "white", "blue")){
            input "UseSimpleMode", "bool", title: "Use a simple mode trigger", submitOnChange:true
            if(UseSimpleMode)
            {                
                def message = ""
                def devivesStr = ""

                def s = simpleModeButton?.size() 
                def i = 0
                input "simpleModeButton", "capability.holdableButton", title: "When ${!simpleModeButton ? "this button is" : (s > 1 ? "these buttons are" : "this button is")} pushed, work in limited mode (hold or push again to cancel)", multiple: true, required: false, submitOnChange:true
                input "simpleModeTimeLimit", "number", title: "Optional: return to normal operation after a certain amount of time", descripition: "Time in hours", submitOnChange:true
                if(simpleModeButton)
                {
                    for(s!=0;i<s;i++){
                        devivesStr = devivesStr.length() > 0 ? devivesStr + ", " + simpleModeButton[i].toString() : simpleModeButton[i].toString()
                    } 
                    if(simpleModeTimeLimit)
                    {
                        message = "Limited mode will be canceled after $simpleModeTimeLimit hours or after a new button event" //. Note that $devivesStr will not be able to cancel limited mode before time is out" 
                        paragraph formatText(message, "white", "grey") 
                    }
                    message = simpleModeButton ? "$app.label will operate in limited mode when $devivesStr ${s > 1 ? "have" : "has"} been pushed and canceled when held, double tapped or pushed again. Power saving options will not be active. ${simpleModeTriggerType == "both" ? "Note taht $simpleModeButton supercede $simpleModeContact":""}" : ""
                }
            }
            paragraph formatText(message, "white", "grey")
            def bedDevice = simpleModeTriggerType == "contact" ? simpleModeContact : simpleModeButton
            input "setSpecialTemp", "bool", title: "Keep room at a preset temperature when in $bedDevice is ${simpleModeTriggerType == "contact" ? "closed" : "pushed"}", submitOnChange:true, defaultValue:false
            input "specialSubstraction", "bool", title: "Lower the current set point instead?", submitOnChange:true

            if(setSpecialTemp)
            {
                app.updateSetting("specialSubstraction",[value:false,type:"bool"]) // foolproofing
                input "specialTemp", "number", title: "Set the desired temperature", required: true
            }
            if(specialSubstraction)
            {
                app.updateSetting("setSpecialTemp",[value:false,type:"bool"]) // foolproofing
                input "substract", "number", title: "Substract this value to the current set point", required:true 
            }
        }
    }
}
def windowsManagement(){
    def title = formatText("WINDOWS SETTINGS","white", "grey")

    def pageProperties = [
        name:       "windowsManagement",
        title:      title,
        nextPage:   "settings",
        install: false,
        uninstall: false
    ]
    dynamicPage(pageProperties) {
        section(formatText("Fans or Windows", "white", "blue"))
        {
            input "controlWindows", "bool", title: "Control some windows", submitOnChange:true
            if(controlWindows)
            {
                input "windows", "capability.switch", title: "Turn on those switches when home needs to cool down, wheather permitting", multiple:true, required: false, submitOnChange: true
                if(windows)
                {
                    if(windows.size() > 1)
                    {
                        input "onlySomeWindowsWillOpen", "bool", title:"Differentiate some windows behavior based on location mode", submitOnChange: true, defaultValue:false

                        if(onlySomeWindowsWillOpen)
                        {
                            def list = []
                            int i = 0
                            int s = windows.size() 
                            for(s!=0;i<s;i++)
                            {
                                list += windows[i].toString()
                            }

                            list = list.sort()
                            log.debug "------------- list = $list"

                            input "modeSpecificWindows", "mode", title:"select the modes under which you want only some specific windows to be operated", multiple:true, required:true
                            input "onlyThoseWindows", "enum", title:"Select the windows for these modes", options:list, required:true
                        }
                    }

                    input "windowsModes", "mode", title: "Select under which modes ALL WINDOWS can be operated", required:true, multiple:true

                    input "outsidetempwindowsH", "number", title: "Set a temperature below which it's ok to turn on $windows", required: true, submitOnChange: true
                    input "outsidetempwindowsL", "number", title: "Set a temperature below which it's NOT ok to turn on $windows", required: true, submitOnChange: true
                    if(outsidetempwindowsH && outsidetempwindowsL)
                    {
                        paragraph "If outside temperature is between ${outsidetempwindowsL}F & ${outsidetempwindowsH}F, $windows will be used to coold down your place instead of your AC"

                        input "operationTime", "bool", title: "${windows}' operation must stop after a certain time", defaultValue:false, submitOnChange:true
                        if(operationTime)
                        {
                            input "windowsDuration", "number", title: "Set minimum operation time", description: "time in seconds", required: false, submitOnChange:true
                            if(windowsDuration)
                            {
                                paragraph "<div style=\"width:102%;background-color:#1C2BB7;color:red;padding:4px;font-weight: bold;box-shadow: 1px 2px 2px #bababa;margin-left: -10px\">${app.name} will determine duration based on this value and outside temperature. The cooler it is outside, the shorter the duration (the closer the duration will be to the minimum you set here). Recommended value: 10 seconds</div>"
                            }
                            input "maxDuration", "number", title: "Set maximum operation time", description: "time in seconds", required: false, submitOnChange:true

                            input "customCommand", "text", title: "custom command to stop operation (default is 'off()')", required: false, submitOnChange:true

                            if(customCommand)
                            {
                                def cmd = customCommand.contains("()") ? customCommand.minus("()") : customCommand
                                def windowsCmds = windows.findAll{it.hasCommand("${cmd}")}
                                boolean cmdOk = windowsCmds.size() == windows.size()
                                if(!cmdOk)
                                {
                                    paragraph "<div style=\"width:102%;background-color:#1C2BB7;color:red;padding:4px;font-weight: bold;box-shadow: 1px 2px 2px #bababa;margin-left: -10px\">SORRY, THIS COMMAND $customCommand IS NOT SUPPORTED BY AT LEAST ONE OF YOUR DEVICES! Maybe a spelling error? In any case, make sure that each one of them support this command</div>"

                                }
                                else
                                {
                                    paragraph """<div style=\"width:102%;background-color:grey;color:white;padding:4px;font-weight: bold;box-shadow: 1px 2px 2px #bababa;margin-left: -10px\">The command $customCommand is supported by all your devices!</div> """

                                }
                            }

                        }
                    }

                    if(doorsContacts && doorThermostat)
                    {
                        paragraph """In the 'contact sensors' settings you opted for for synchronizing your thermostat's operations 
with another thermostat's when some door contacts are open. Do you want to also control the windows from this other thermostat's room?"""
                        input "useOtherWindows", "bool", title: "Also control these windows when $doorsContacts are open", submitOnChange:true, defaultValue:false
                        if(useOtherWindows)
                        {
                            input "otherWindows", "capability.switch", title: "Select your windows", required:true, multiple:true
                        }

                    }
                }
            }
        }
    }
}
def pageNameUpdate(){
    if(atomicState.paused)
    {
        log.debug "new app label: ${app.label}"
        while(app.label.contains(" (Paused) "))
        {
            app.updateLabel(app.label.minus("(Paused)" ))
        }
        app.updateLabel(app.label + ("<font color = 'red'> (Paused) </font>" ))
    }
    else if(app.label.contains("(Paused)"))
    {
        app.updateLabel(app.label.minus("<font color = 'red'> (Paused) </font>" ))
        while(app.label.contains(" (Paused) ")){app.updateLabel(app.label.minus("(Paused)" ))}
        log.debug "new app label: ${app.label}"
    }
    if(atomicState.paused == true)
    {
        atomicState.button_name = "resume"
        logging "button name is: $atomicState.button_name"
    }
    else 
    {
        atomicState.button_name = "pause"
        logging "button name is: $atomicState.button_name"
    }
}

/************************************************INITIALIZATION*************************************************/
def installed() {
    logging("Installed with settings: ${settings}")

    initialize()
}
def updated() {

    log.info "${app.name} updated with settings: $settings"

    unsubscribe()
    unschedule()
    initialize()
}
def initialize(){
    log.info "initializing"
    if(enabledebug)
    {
        log.warn "debug enabled"      
        atomicState.EnableDebugTime = now()
        runIn(1800,disablelogging)
        atomicState.enableDescriptionTime = now()
        runIn(86400, disabledescription)
        descriptionText "debug will be disabled in 30 minutes"
    }
    else 
    {
        log.warn "debug disabled"
    }
    atomicState.paused = false
    atomicState.restricted = false
    atomicState.lastNeed = "cool"
    atomicState.antifreeze = false
    atomicState.buttonPushed = false
    atomicState.setpointSentByApp = false
    atomicState.openByApp = true
    atomicState.closedByApp = true
    atomicState.lastPlay = atomicState.lastPlay != null ? atomicState.lastPlay : now()
    atomicState.overrideTime = now() as long
        atomicState.resendAttempt = now() as long
        atomicState.offAttempt = now() as long

        atomicState.lastMotionEvent = now() as long
        atomicState.lastNotification = now() as long
        atomicState.motionEvents = 0
    atomicState.lastTimeBsTrue = now() as long

        logging("subscribing to events...")

    //subscribe(location, "mode", ChangedModeHandler) 
    subscribe(thermostat, "temperature", temperatureHandler)
    if(sensor)
    {
        int i = 0
        int s = sensor.size()
        for(s != 0; i<s;i++)
        {
            subscribe(sensor[i], "temperature", temperatureHandler)
        }
    }
    if(dimmer)
    {
        subscribe(dimmer, "level", dimmerHandler)
    }
    descriptionText "subscribed $dimmer to dimmerHandler"
    subscribe(thermostat, "heatingSetpoint", setPointHandler)
    subscribe(thermostat, "coolingSetpoint", setPointHandler)
    subscribe(thermostat, "thermostatMode", thermostatModeHandler)

    descriptionText "subscribed ${thermostat}'s coolingSetpoint to setPointHandler"
    descriptionText "subscribed ${thermostat}'s heatingSetpoint to setPointHandler"
    descriptionText "subscribed ${thermostat}'s thermostatMode to thermostatModeHandler"

    if(sync && thermostatB)
    {
        int i = 0
        int s = thermostatB.size()
        for(s!= 0; i<s; i++)
        {
            subscribe(thermostatB[i], "heatingSetpoint", setPointHandler)
            subscribe(thermostatB[i], "coolingSetpoint", setPointHandler)
            subscribe(thermostatB[i], "thermostatMode", thermostatModeHandler)
            descriptionText "subscribed ${thermostatB[i]}'s thermostatMode to thermostatModeHandler"
            descriptionText "subscribed ${thermostatB[i]}'s heatingSetpoint to setPointHandler"
            descriptionText "subscribed ${thermostatB[i]}'s coolingSetpoint to setPointHandler"
        }
    }    

    subscribe(location, "mode", modeChangeHandler)

    if(windows && controlWindows)
    {
        if(windows.every{element -> element.hasCapability("ContactSensor")})
        {
            subscribe(windows, "contact", contactHandler)
            subscribe(windows, "contact", windowsHandler)
            log.debug "$windows subscribed to contactHandler()"
        }
    }
    if(simpleModeContact)
    {        
        subscribe(simpleModeContact, "contact", simpleModeContactHandler)
    }
    if(simpleModeButton)
    {
        subscribe(simpleModeButton, "held", holdableButtonHandler)   
        subscribe(simpleModeButton, "pushed", holdableButtonHandler)   

    }
    if(buttonPause)
    {
        subscribe(buttonPause, "doubleTapped", doubleTapableButtonHandler) 
        log.info "$buttonPause subscribed to doubleTapableButtonHandler"
    }
    if(WindowsContact)
    {
        subscribe(WindowsContact, "contact", contactHandler)
    }
    if(motionSensors)
    {
        subscribe(motion, "motion", motionHandler)
    }

    if(polldevices)
    {
        schedule("0 0/5 * * * ?", Poll)
    }

    schedule("0 0/1 * * * ?", mainloop)


    descriptionText "END OF INITIALIZATION"

}

/************************************************EVT HANDLERS***************************************************/
def modeChangeHandler(evt){
    log.debug "$evt.name is now $evt.value"

    if(location.mode in restricted)
    {
        log.trace "$thermostat set to $restrictedThermMode due to restricted mode"
        thermostat."${restrictedThermMode}"()
        heater?.off() // make sure this one is off 
        cooler?.off() // same
    }
    else
    {
        log.trace "location not in restricted mode, resuming normal operations"
    }

    //mainloop()
}
def appButtonHandler(btn) {

    switch(btn) {
        case "pause":atomicState.paused = !atomicState.paused
        logging("atomicState.paused = $atomicState.paused")
        if(atomicState.paused)
        {
            log.debug "unsuscribing from events..."
            unsubscribe()  
            log.debug "unschedule()..."
            unschedule()
            break
        }
        else
        {
            updated()            
            break
        }
        case "update":
        atomicState.paused = false
        updated()
        break
        case "run":
        if(!atomicState.paused) mainloop()
        break
        case "poll":
        Poll()
        break

    }
}
def contactHandler(evt){
    if(!atomicState.paused){
        if(location.mode in restricted){
            descriptionText "location in restricted mode, doing nothing"
            return
        } 
        log.info "$evt.device is $evt.value"
        atomicState.lastOpenEvt = now() 
        mainloop()
    }
}
def motionHandler(evt){
    if(!atomicState.paused){
        if(location.mode in restricted){
            descriptionText "location in restricted mode, doing nothing"
            return
        } 
        descriptionText "$evt.device is $evt.value"
        mainloop()
    }
}
def temperatureHandler(evt){
    if(!atomicState.paused){
        if(location.mode in restricted){
            descriptionText "location in restricted mode, doing nothing"
            return
        } 
        logging("$evt.device returns ${evt.value}F")
        mainloop()
    }
}
def simpleModeContactHandler(evt){
    if(!atomicState.paused){
        if(location.mode in restricted){
            descriptionText "location in restricted mode, doing nothing"
            return
        } 
        log.info "$evt.device is $evt.value"

        atomicState.lastBSeventStamp = new Date().format("h:mm:ss a", location.timeZone) // formated time stamp for debug purpose

        if(now() - atomicState.lastBSevent > 60000) // prevent false positives due to floating state of the simple mode trigger due to the mattress's weight (still working on this...)
        {
            atomicState.ButtonSupercedes = false // if there's a new contact event, this means it is working as expected, therefore no need for the button to supercede the sensor
        }

        // this boolean remains false until next button event
        atomicState.lastBSevent = now()
        mainloop()
    }
}
def holdableButtonHandler(evt){
    if(!atomicState.paused){
        if(location.mode in restricted){
            descriptionText "location in restricted mode, doing nothing"
            return
        } 
        log.debug "BUTTON EVT $evt.device $evt.name $evt.value"

        if(evt.name == "pushed") 
        {
            atomicState.buttonPushed = !atomicState.buttonPushed

            atomicState.lastButtonEvent = atomicState.buttonPushed ? now() : atomicState.lastButtonEvent // time stamp when true only
        }


        mainloop()
    }
    else
    {
        log.warn "App is paused, button event was ignored"
    }
}
def doubleTapableButtonHandler(evt){
    if(!atomicState.paused){
        if(location.mode in restricted){
            descriptionText "location in restricted mode, doing nothing"
            return
        } 
        log.debug "BUTTON EVT $evt.device $evt.name $evt.value"

        if(evt.name == "doubleTapped")
        {
            atomicState.paused = !atomicState.paused 
            def message = atomicState.paused ? "APP PAUSED BY DOUBLE TAP" : "APP RESUMED BY DOUBLE TAP"
            log.warn message
            if(buttonTimer && atomicState.paused) {
                log.debug "App will resume in $buttonTimer minutes"
                runIn(buttonTimer, updated)
            }
        } 
    }
}
def thermostatModeHandler(evt){

    if(location.mode in restricted){
        descriptionText "location in restricted mode, doing nothing"
        return
    } 
    log.debug "--------- $evt.device set to $evt.value"

    if(evt.value == "auto" && autoOverride)
    {
        atomicState.overrideTime = now()  
        atomicState.override = true
        return
    }
    else
    {
        atomicState.override = false
    }

    if(!atomicState.restricted && !atomicState.paused){
        logging """$evt.device $evt.name $evt.value
sync ? $sync
thermostatB: $thermostatB

"""
        if(sync && thermostatB)
        {
            int i = 0
            int s = thermostatB.size()

            if(!ignoreTherModes)
            {
                if("$evt.device" == "$thermostat")
                {
                    //log.warn "case AM"
                    def cmd = "set${evt.name.capitalize()}"
                    for(s!=0; i<s; i++)
                    {
                        thermostatB[i]."${cmd}"(evt.value)
                        descriptionText "${thermostatB[i]} $cmd $evt.value"
                    }
                }
                else if(thermostatB.find{it.toString() == "$evt.device"})
                {
                    //log.warn "case BM"
                    def cmd = "set${evt.name.capitalize()}"
                    thermostat."${cmd}"(evt.value)
                    descriptionText "$thermostat $cmd $evt.value"
                }
            }
            else
            {
                descriptionText "ignoring operating mode sync at user request (syncing set points only)"
            }
        }
    }
}
def setPointHandler(evt){
    if(!atomicState.paused){
        if(location.mode in restricted){
            descriptionText "location in restricted mode, doing nothing"
            return
        } 
        logging """$evt.device $evt.name $evt.value
sync ? $sync
thermostatB: $thermostatB

"""    

        if(sync && thermostatB)
        {
            def cmd = "set${evt.name.capitalize()}"
            int i = 0
            int s = thermostatB.size()


            logging """
thermostat = $evt.device
evt.value = $evt.value
evt.name = $evt.name
${thermostat?.currentValue(evt.name) != "$evt.value"}

KEEP FOR FUTURE REFERENCE!
thermostatB current set point: ${thermostatB[0].currentValue(evt.name)} = $evt.value
true? ${thermostatB[0].currentValue(evt.name) == evt.value.toInteger()}
any found with same current value: ${thermostatB?.any{it -> it.currentValue(evt.name) == evt.value.toInteger()}} 


"""
            if("$evt.device" == "$thermostat")
            {
                //log.warn "case ASP"
                for(s!=0; i<s; i++)
                {
                    thermostatB[i]."${cmd}"(evt.value)
                    descriptionText "${thermostatB[i]} $cmd $evt.value"
                }
            }
            if(thermostatB.find{it.toString() == "$evt.device"})
            {
                //log.warn "case BSP"
                thermostat."${cmd}"(evt.value)
                descriptionText "$thermostat $cmd $evt.value"
                //atomicState.setpointSentByApp = true
            }
            //return // must not set atomicState.setpointSentByApp back to false in this case
        }

        if(!atomicState.setpointSentByApp)
        {
            descriptionText "new $evt.name is $evt.value -------------------------------------"

            if(method == "auto" && !atomicState.setpointSentByApp)
            {
                log.debug "Updating automatic settings based on new thermostat set point input $evt.value"
                //updateValues(evt.value.toInteger())
                updateValues(evt.value)
            }


            def currDim = dimmer?.currentValue("level")
            def thermMode = thermostat?.currentValue("thermostatMode")

            // this will be true only if thermostat is heating or cooling; therefore, dimmer won't be adjusted if off 
            // using atomicState.lastNeed == "heat" / "cool" seemed to allow exceptions... 
            boolean correspondingMode = (evt.name == "heatingSetpoint" && thermMode == "heat") || (evt.name == "coolingSetpoint" && thermMode == "cool")

            def message = """
atomicState.setpointSentByApp = $atomicState.setpointSentByApp
Current $dimmer value is $currDim
atomicState.lastNeed = $atomicState.lastNeed   
evt.value = $evt.value   
"""
            logging "<div style=\"width:102%;background-color:grey;color:white;padding:4px;font-weight: bold;box-shadow: 1px 2px 2px #bababa;margin-left: -10px\">$message</div>"

            boolean simpleModeActive = simpleModeIsActive()
            def desired = getDesired(simpleModeActive)

            def inside = getInsideTemp()
            atomicState.inside = atomicState.inside != null ? atomicState.inside : inside
            def needData = getNeed(desired, simpleModeActive, inside)
            def need = needData[1]
            def cmd = "set"+"${needData[0]}"+"ingSetpoint" // "Cool" or "Heat" with a capital letter


            // make sure the therm event is same as current need
            // as to not apply a value from a differentiated thermostat mode (heat set to 75 will modify coolingSP and then trigger an event)

            if(correspondingMode && currDim != evt.value) 
            {
                if(method == "dimmer")
                {
                    //runIn(3, setDimmer, [data:evt.value.toInteger()]) 
                    log.debug "SETTING $dimmer to $evt.value"

                    setDimmer(evt.value) 
                }
            }
            if(!correspondingMode)
            {
                descriptionText "not updating dimmer because this is $evt.name and current mode is $thermMode"
            }
            if(currDim == evt.value)
            {
                descriptionText "dimmer level ok (${dimmer?.currentValue("level")} == ${evt.value}"
            }
        }
        else
        {
            log.warn "event generated by this app, doing nothing"
        }
        atomicState.setpointSentByApp = false // always reset this static/class variable after calling it
        //mainloop() // prevent feedback loops so both dimmer and thermosta set points can be modified. Changes will be made on next scheduled loop or motion events
        atomicState.lastSetPoint = evt.value
    }


}
def dimmerHandler(evt){

    if(!atomicState.paused){
        if(location.mode in restricted){
            descriptionText "location in restricted mode, doing nothing"
            return
        } 
        descriptionText "new dimmer level is $evt.value"
        if(method == "auto" && !atomicState.setpointSentByApp)
        {
            log.debug "Updating automatic settings based on new dimmer level"

            def outside = outsideTemp.currentValue("temperature")
            def outsideThreshold = getOutsideThershold()
            def needSituation = outside < outsideThreshold ? "heat" : "cool"
            def newRefTemp = outside



            updateValues(evt.value)

        }
        else if(!atomicState.setpointSentByApp)
        {
            log.info "NOT AUTO METHOD"
        }
        else if(atomicState.setpointSentByApp)
        {
            log.info "command coming from this app, skipping"
        }

        atomicState.setpointSentByApp = false // always reset this static/class variable after calling it

        //mainloop() // prevent feedback loops so both dimmer and thermostat set points can be modified. Changes will be made on next scheduled loop or motion events
    }
}
def updateValues(evtVal){

    evtVal = Double.parseDouble(evtVal)
    def lastSetpoint = atomicState.lastSetPoint.toDouble()

    log.warn """
evtVal instanceof Double ? ${evtVal instanceof Double}
tempConvertVal instanceof Double ? ${tempConvertVal instanceof Double}
tempConvertVal instanceof String ? ${tempConvertVal instanceof String}
"""

    def outside = outsideTemp.currentValue("temperature")
    def outsideThreshold = getOutsideThershold()
    def needSituation = outside < outsideThreshold ? "heat" : "cool"
    def newRefTemp = outside
    def newDesiredVar = Math.abs(evtVal - outside).toInteger()
    log.warn """
newDesiredVar = $newDesiredVar
"""
    app.updateSetting("desiredVar",[value:newDesiredVar,type:"number"]) // update this setting
    app.updateSetting("refTemp",[value:newRefTemp,type:"number"]) // we also need to update the new reference temperature in order to modify the linear equation 
    log.info """
newDesiredVar = $newDesiredVar
outside = $outside
needSituation = $needSituation
lastSetpoint = $lastSetpoint
new setpoint = $evtVal
"""          

    // calculate an absolute value of the difference between old and new value
    def absDifference = Math.abs(lastSetpoint - evtVal)
    // update min and max auto cool values
    if(needSituation == "cool")
    {        
        int val = 0

        logging """
maxAutoCool = $maxAutoCool instanceof String ? ${maxAutoCool instanceof String}
absDifference = $absDifference instanceof String ? ${absDifference instanceof String}
val = $val instanceof String ? ${val instanceof String}

"""

        val = maxAutoCool.toInteger() - absDifference.toInteger()    
        val = val < 70 ? 70 : val // don't go too low
        // so we lower this setting's value a bit
        app.updateSetting("minAutoCool",[value:val,type:"number"])
        log.debug "minAutoCool is now $minAutoCool"
        // }
        // else { // if need warmer room, raise max
        val = maxAutoCool + absDifference
        val = val > 80 ? 80 : val // don't go too high
        app.updateSetting("maxAutoCool",[value:val,type:"number"])
        log.debug "maxAutoCool is now $maxAutoCool"
        // }
    }
    // update min and max auto heat values
    if(needSituation == "heat")
    {       
        int val = 0

        logging """
minAutoHeat = $minAutoHeat instanceof String ? ${minAutoHeat instanceof String}
absDifference = $absDifference instanceof String ? ${absDifference instanceof String}
val = $val instanceof String ? ${val instanceof String}

"""

        val = minAutoHeat.toInteger() - absDifference.toInteger()    

        log.debug "minAutoHeat = $minAutoHeat instanceof String ? ${minAutoHeat instanceof String}"

        val = val < 68 ? 68 : val // don't go too low
        // so we lower this setting's value a bit        
        app.updateSetting("minAutoHeat",[value:val,type:"number"])     
        log.debug "minAutoHeat is now $minAutoHeat"
        val = maxAutoHeat + absDifference
        val = val > 80 ? 80 : val // don't go too high
        app.updateSetting("maxAutoHeat",[value:val,type:"number"])
        log.debug "maxAutoHeat is now $maxAutoHeat"
    }
}
def outsideThresDimmerHandler(evt){
    if(!atomicState.paused){
        if(location.mode in restricted){
            descriptionText "location in restricted mode, doing nothing"
            return
        } 
        descriptionText "*********** Outside threshold value is now: $evt.value ***********"
        //mainloop()
    }
}
def windowsHandler(evt){
    if(!atomicState.paused){
        if(location.mode in restricted){
            descriptionText "location in restricted mode, doing nothing"
            return
        } 
        log.debug "$evt.device is $evt.value"
        boolean doorContactsAreOpen = doorsContactsAreOpen()

        if(evt.value == "open")
        {
            /* 
if(doorsManagement && doorContactsAreOpen)
{
atomicState.otherWindowsOpenByApp = true
otherWindows?.on()
}
*/
            boolean openMore = !atomicState.widerOpeningDone && atomicState.insideTempHasIncreased
            if(!openMore){
                atomicState.lastOpeningTime = now()
            }
            atomicState.lastOpeningTimeStamp = new Date().format("h:mm:ss a", location.timeZone) // formated time stamp for debug purpose

        }
        else if(evt.value == "closed")
        {
            /*
if(doorsManagement && doorContactsAreOpen)
{
atomicState.otherWindowsClosedByApp = true
otherWindows?.off()
}
*/
            atomicState.lastClosingTime = now()
            atomicState.lastClosingTimeStamp = new Date().format("h:mm:ss a", location.timeZone) // formated time stamp for debug purpose
        }
    }
}

/************************************************MAIN functions*************************************************/
def mainloop(){
 
    if(!atomicState.paused)
    {

        if(location.mode in restricted){
            descriptionText "location in restricted mode, doing nothing"
            return
        }    

        boolean simpleModeActive = simpleModeIsActive()
        boolean motionActive = Active() || simpleModeContactClosed
        boolean contactClosed = !contactsAreOpen()
        boolean doorContactsAreOpen = doorsContactsAreOpen()

        int desired = getDesired(simpleModeActive)

        def inside = getInsideTemp()
        def outside = outsideTemp.currentValue("temperature")
        descriptionText "outside temperature is $outside"
        def needData = getNeed(desired, simpleModeActive, inside)
        def need = needData[1]

        def currSP = thermostat?.currentValue("thermostatSetpoint")
        //log.warn "--- $currSP"
        def thermMode = thermostat?.currentValue("thermostatMode")
        logging("need is needData[1] = $need")
        def cmd = "set"+"${needData[0]}"+"ingSetpoint" // "Cool" or "Heat" with a capital letter


        /********************** ANTI FREEZE SAFETY TESTS *************************/
        if(atomicState.antifreeze)
        {
            log.warn "ANTI FREEZE HAS BEEN TRIGGERED"
        }
        // antifreeze precaution (runs after calling atomicState.antifreeze on purpose here)
        def backupSensorTemp = backupSensor ? backupSensor.currentValue("temperature"): inside
        
        if(antifreeze){
            def safeVal = safeValue != null ? safeValue : criticalcold != null ? criticalcold : 67

            if(inside <= safeVal || backupSensorTemp <= safeVal){

                atomicState.antifreeze = true

                log.warn """$thermostat setpoint set to 72 as ANTI FREEZE VALUE
inside = $inside
safeValue = $safeVal
"""
                thermostat.setThermostatMode("heat")
                thermostat.setHeatingSetpoint(72)
                windows?.off() // make sure all windows linked to this instance are closed
                heater?.on()// turn on the alternate heater, if any
                sendNotification()
                return
            }
            else if(atomicState.antifreeze)
            {
                atomicState.antifreeze = false
                log.trace "END OF ANTI FREEZE"
            }

        }
        else // mandatory anti freeze
        {
            def defaultSafeTemp = criticalcold == null ? 58 : criticalcold <= 58 ? criticalcold : 58 
            if(inside <= defaultSafeTemp || backupSensorTemp <= defaultSafeTemp){
                log.warn """ANTIFREEZE (DEFAULT) IS TRIGGERED: 
inside = $inside
backupSensorTemp = $backupSensorTemp
defaultSafeTemp = $defaultSafeTemp (is this user's criticalcold set temp ? ${criticalcold == null ? false : true}
"""
                windows?.off() // make sure all windows linked to this instance are closed
                thermostat.setThermostatMode("heat")
                thermostat.setHeatingSetpoint(72)
                atomicState.antifreeze = true
                //sendNotification()
            }
            else
            {
                atomicState.antifreeze = false
            }
        }
        if(autoOverride && thermMode == "auto"){
            atomicState.override = true // wanted redundancy for the rare cases when evt handler failed
            def overrideDur = overrideDuration != null ? overrideDuration : 0
            def timeLimit = overrideDur * 60 * 60 * 1000
            def timeStamp = atomicState.overrideTime

            if(overrideDur != 0 && overrideDur != null)
            {
                if(now() - timeStamp > timeLimit)
                {
                    log.warn "END OF OVERRIDE, turning off $thermostat"
                    atomicState.override = false
                    thermostat.setThermostatMode("off")
                }
                else 
                {
                    log.warn "OVERRIDE - AUTO MODE - remaining time: ${getRemainTime(overrideDur, atomicState.overrideTime)}"
                }
            }
            else 
            {
                log.warn "OVERRIDE - APP PAUSED DUE TO AUTO MODE (no time limit)"
                return
            }
        }

        if(thermostat.currentValue("thermostatFanMode") == "on" && contactClosed && fancirculate && atomicState.fanOn){
            descriptionText "Setting fan back to auto"
            thermostat.setThermostatFanMode("auto")
            atomicState.fanOn = false 
        }
        if(enabledebug && now() - atomicState.EnableDebugTime > 1800000){
            descriptionText "Debug has been up for too long..."
            disablelogging() 
        }
        if(description && now() - atomicState.enableDescriptionTime > 86400000){
            descriptionText "Description text has been up for too long..."
            disabledescription() 
        }

        if(pw){
            logging("$pw power meter returns ${pw?.currentValue("power")}Watts")
        }
        if(!atomicState.override){

            /********************** END OF ANTIFREEZE TESTS *************************/

            virtualThermostat(need) // RUN VIRTUAL THERMOSTAT BEFORE any program interruption due to power usage and heat pump tests

            /********************** VERIFY HEATPUMP AND POWER USAGE CONDITIONS *************************/
            boolean tooMuchPower = false
            if(controlPowerConsumption)
            {
                pollPowerMeters()
                currentPower = pw.currentValue("power").toInteger() + heater.currentValue("power").toInteger()
                tooMuchPower = currentPower > maxPowerConsumption.toInteger()
                if(tooMuchPower)
                {
                    log.warn formatText("power consumption heater + thermostat = $currentPower Watts", "white", "red")
                }
                else
                {
                    descriptionText formatText("power consumption heater + thermostat = $currentPower Watts", "white", "lightgreen")
                }
                //tooMuchPower = devicePriority == "$thermostat" && heatpumpConditionsTrue ? true : tooMuchPower
                // redundant: if device priority is thermostat and heatpump conditions are true, then the thermostat will be shut down
                // what we need is to make sure that the alternate heater (mandatory if heatpump true) will kick in, which is set in virtualThermostat method
            }
            if((heatpump && heatpumpConditionsTrue) || (tooMuchPower && devicePriority != "$thermostat"))
            {
                thermostat.setThermostatMode("off") // so as to take precedence over any other condition 
                runIn(4, toggleRelatedSwitch, [data:"off"])
                log.info "$thermostat turned off due to heatpump or power usage conditions"
                return // STOP THE PROGRAM HERE
            }


            /****************END OF HEAT PUMP AND POWER USAGE TESTS*************************/

            def currentOperatingNeed = need == "cool" ? "cooling" : need == "heat" ? "heating" : need == "off" ? "idle" : "ERROR" 
            if(currentOperatingNeed == "ERROR"){log.error "currentOperatingNeed = $currentOperatingNeed"}
            logging """currentOperatingNeed = $currentOperatingNeed && need = $need
thermostat.currentValue("thermostatOperatingState") = ${thermostat.currentValue("thermostatOperatingState")}
${thermostat.currentValue("thermostatOperatingState") == currentOperatingNeed}
"""
            // control discrepancy when thermostat measures a temp equal to desired temp while it's not the case on the alternate sensor
            boolean thermTempDiscrepancy = need in ["cool", "heat"] ? thermostat.currentValue("temperature") == desired : false
            thermTempDiscrepancy = contactClosed && !doorContactsAreOpen ? thermTempDiscrepancy : false
            boolean OperatingStateOk = contactClosed && !doorContactsAreOpen ? thermostat.currentValue("thermostatOperatingState") in [currentOperatingNeed, "fanCirculate"] : true

            logging "thermTempDiscrepancy = $thermTempDiscrepancy currentOperatingNeed = $currentOperatingNeed | current state = ${thermostat.currentValue("thermostatOperatingState")}"
            descriptionText "Operating State is Consistent: $OperatingStateOk"

            atomicState.lastSetTime = atomicState.lastSetTime != null ? atomicState.lastSetTime : now() + 31 * 60 * 1000

            atomicState.forceLimit = Math.abs(inside-desired) > 5 ? 20 : 5 // higher amount of attempts if bigger discrepancy         
            atomicState.forceAttempts = atomicState.forceAttempts != null ? atomicState.forceAttempts : 0
            boolean forceCommand = forceCommand ? (atomicState.forceAttempts < atomicState.forceLimit ? true : false) : false //
            forceCommand = forceCommand ? (need in ["cool", "heat"] && Math.abs(inside-desired) > 3 ? true : false) : false // 
            forceCommand = !forceCommand && forceCommand && Math.abs(inside-desired) >= 5 ? true : (forceCommand ? true : false) // counter ignored if forceCmd user decision is true and temp discrepancy too high: continue trying until temp is ok
            forceCommand = !forceCommand && !OperatingStateOk ? true : forceCommand // OperatingStateOk supercedes all other conditions
            forceCommand = contactClosed && !doorContactsAreOpen ? forceCommand : false // don't use this method when contacts are open, even door contacts

            boolean heatpumpConditionsTrue = outside < lowTemp
            // if forececommand true and need is not off make sure we're not under heat pump cold conditions 
            forceCommand = forceCommand && need != "off" ? !heatpumpConditionsTrue : forceCommand // if need = off then apply forcecommand functions to make sure to turn it off


            if(!OperatingStateOk && thermTempDiscrepancy)
            {
                descriptionText "$thermostat IS IDLE BECAUSE SETPOINT IS INCONSISTENT DUE TO ITS CURRENT TEMPERATURE"
            }

            logging "forceCommand ? $forceCommand atomicState.forceAttempts = $atomicState.forceAttempts | abs(inside-desired) = ${Math.abs(inside-desired).round(2)}"

            if(thermMode != need || forceCommand)
            {
                if(forceCommand && OperatingStateOk) {log.warn "FORCING CMD TO DEVICE BECAUSE temperature difference is TOO HIGH"}
                if(forceCommand && !OperatingStateOk && !thermTempDiscrepancy) {logging "FORCING CMD TO DEVICE BECAUSE current operating state is INCONSISTENT"}

                atomicState.forceAttempts += 1
                if(atomicState.forceAttempts >= forceLimit) { runIn(1800, resetCmdForce)} // after 5 attempts, stop and retry in half an hour to prevent z-wave cmds overflow onto the device

                //atomicState.lastSetTime =  5 * 60 * 1000 + 1 // for TESTS ONLY


                if(need != "off" || forceCommand || (need == "off" && (sensor || offrequiredbyuser)))
                {                
                    if((!OperatingStateOk || now() - atomicState.lastSetTime > 5 * 60 * 1000) || need == "off" || forceCommand)
                    {
                        thermostat.setThermostatMode(need) // set desired mode

                        // readjust setpoint if there's inconsistency
                        if(thermTempDiscrepancy && !heatpumpConditionsTrue)
                        {
                            if(need == "cool")
                            {
                                def temporarySetpoint = desired - 1
                                thermostat.setCoolingSetpoint(temporarySetpoint) 
                                log.warn "CHANGING COOLING SETPOINT TO $desired - 1 = ${temporarySetpoint} due to operation discrepancy"
                                atomicState.setpointSentByApp = true // prevent this from modifying the dimmer's and the desired value
                            }
                            else if(need == "heat")
                            {    
                                def temporarySetpoint = desired + 1
                                thermostat.setHeatingSetpoint(temporarySetpoint)
                                log.warn "CHANGING HEATING SETPOINT TO $desired + 1 = ${temporarySetpoint} due to operation discrepancy"
                                atomicState.setpointSentByApp = true // prevent this from modifying the dimmer's and the desired value
                            }
                            toggleRelatedSwitch("on")
                        }


                        atomicState.lastSetTime = now()

                        if(need in ["cool", "heat"])
                        {
                            atomicState.lastSetTime = now() // prevent switching from heat to cool too frequently
                        }

                        logging("THERMOSTAT SET TO $need mode (587gf)")
                    }
                    else if(now() - atomicState.lastSetTime < 30 * 60 * 1000)
                    {
                        logging "THERMOSTAT CMD NOT SENT due to the fact that a cmd was already sent less than 5 minutes ago"
                    }

                    if(need == "off")
                    {
                        atomicState.offAttempt = now() as long

                            }
                }
                else 
                {
                    logging("THERMOSTAT stays in $thermMode mode")
                }

            }
            else if(need != "off")
            {
                logging("Thermostat already set to $need mode")
            }

            if(need != "off" && currSP != desired && !thermTempDiscrepancy)
            {
                atomicState.setpointSentByApp = true
                thermostat."${cmd}"(desired)   // set desired temp
                logging("THERMOSTAT SET TO $desired (564fdevrt)")
            }
            else if(need != "off" && !thermTempDiscrepancy)
            {
                logging("Thermostat already set to $desired")
            }
            else if(thermTempDiscrepancy)
            {
                log.warn "Skipping normal setpoint and thermostatMode management due to thermTempDiscrepancy = $thermTempDiscrepancy"   
            }

            if(pw)
            {
                atomicState.resendAttempt = atomicState.resendAttempt ? atomicState.resendAttempt : now()
                atomicState.offAttempt = atomicState.offAttempt ? atomicState.offAttempt : now()
                // here we manage possible failure for a thermostat to have received the z-wave/zigbee or http command
                long timeElapsedSinceLastResend = now() - atomicState.resendAttempt
                long timeElapsedSinceLastOff = now() - atomicState.offAttempt // when device driver returns state off while in fact signal didn't go through
                long threshold = 4 * 60 * 1000 // give it 4 minutes to kick in before attempting new request 
                boolean timeIsUp = timeElapsedSinceLastResend > threshold
                boolean timeIsUpOff = timeElapsedSinceLastOff > 30000
                boolean pwLow = pw?.currentValue("power") < 100 // below 100 watts we assume there's no AC compression nor resistor heat running
                logging("time since last Resend Attempt = ${timeElapsedSinceLastResend/1000} seconds & threshold = ${threshold/1000}sec")
                logging("time since last OFF Attempt = ${timeElapsedSinceLastOff/1000} seconds & threshold = ${30}sec")

                if(timeIsUp && pwLow && need != "off")
                {
                    descriptionText "$app.label is resending ${cmd}(${desired}) due to inconsistency in power value"
                    atomicState.resendAttempt = now() as long
                        atomicState.setpointSentByApp = true
                    thermostat."${cmd}"(desired) // resend cmd
                }
                else if(timeIsUpOff && need == "off" && !pwLow && !doorsContactsAreOpen())
                {
                    log.warn("$thermostat should be off but still draining power, resending cmd")
                    atomicState.offAttempt = now() as long
                        thermostat.setThermostatMode("off")
                    thermostat.off()
                    pollPowerMeters()
                    runIn(10, toggleRelatedSwitch, [data:"off"])
                }
                else if((!pwLow &&  need in ["heat", "cool"]) || (need == "off" && pwLow))
                {
                    logging("EVERYTHING OK")
                }
                else 
                {
                    logging("Auto Fix Should Kick in within time threshold")
                }
            }
        }
        else{
            descriptionText("OVERRIDE MODE--------------")   
        }
    }
    else if(atomicState.restricted)
    {
        log.info "app in restricted mode, doing nothing"
    }
}
def toggleRelatedSwitch(cmd){
    if(controlpwswitch)
    {
        if(pw?.currentValue("switch") != cmd)
        {
            pw?."${cmd}"()   
        }
        else
        {
            description "$pw already turned $cmd"
        }
    }
}
def sendNotification(){
    def message = "Temperature is too low at $thermostat, antifreeze is now active. Please make sure everything is ok"

    atomicState.lastNotification = atomicState.lastNotification != null ? atomicState.lastNotification : now()

    def dTime = 5*60*1000 // every 5 minutes

    if(now() - atomicState.lastNotification >= dTime)
    {
        atomicState.lastNotification = now()

        def musicDeviceList = musicDevice ? buildDebugString(musicDevice) : ""  // build a list of the devices as string
        def speechDeviceList = speech ? buildDebugString(speech) : ""
        def notifDevices = notification ? buildDebugString(notification) : ""

        def notifLogs = "${notification && speaker && speech ? "to ${notifDevices}, ${speakers}, ${speechDeviceList}" : notification && speaker ? "to ${notifDevices}, ${musicDeviceList}" : notification && speech ? "to ${notifDevices}, ${speechDeviceList}" : speaker && speech ? "to ${speakers}, ${speechDeviceList}" : speaker ? "to ${musicDeviceList}" : speech ? "to ${speechDeviceList}" : ""}" 

        def debugMessage = "message to be sent: '${message} ${notifLogs}" 

        descriptionText formatText(debugMessage, "white", "red")

        if(notification)
        {
            notification.deviceNotification(message)
        }
        else
        {
            log.info "User did not select any text notification device"
        }
        if(musicDevice || speech)
        {
            if(musicDevice)
            {
                if(initializeDevices)
                {
                    int i = 0
                    int s = musicDevice.size()
                    def device = []
                    for(s!=0;i!=s;i++)
                    {
                        device = musicDevice[i]                        
                        if(device.hasCommand("initialize"))
                        {
                            logging "Initializing $device (musicDevice)"
                            device.initialize()
                            logging "waiting for 1 second"
                            pauseExecution(1000)
                        }
                    }
                }

                int i = 0
                int s = musicDevice.size()
                def level
                for(s!=0;i!=s;i++)
                {
                    log.debug "Sending message to $device"
                    device = musicDevice[i] 
                    level = device.currentValue("level") // record value for later restore   
                    log.debug "$device volume level is $level"
                    device.setLevel(volumeLevel.toInteger()) // set desired level // for some reason this doesn't work
                    pauseExecution(500)// give it time to go through
                    device.playText(message) // send the message to play
                    device.setLevel(level.toInteger()) // restore previous level value
                }
                return
            }
            if(speech)
            {
                if(initializeDevices)
                {
                    int i = 0
                    int s = speech.size()
                    def device 
                    for(s!=0;i!=s;i++)
                    {
                        device = speech[i]
                        if(device.hasCommand("initialize"))
                        {
                            log.debug "Initializing $device (speech)"
                            device.initialize()
                            log.debug "wainting for 1 second"
                            pauseExecution(1000)
                        }
                    }
                }
                def volume = volumeLevel ? volumeLevel : 70
                speech.speak(message, volume)    
            }
        }
    }
}
def buildDebugString(deviceList){
    def devices = ""
    int i = 0 
    int s = deviceList.size()
    if(s != 0) { 

        for(s!=0; i!=s; i++)
        {
            devices += "${deviceList[i]}, "   
        }

    }
    return devices
}
def resetCmdForce(){
    log.warn "Resetting forceCommand counter"
    atomicState.forceAttempts = 0   
}
def setDimmer(val){

    if(dimmer)
    {
        atomicState.setpointSentByApp = true
        dimmer.setLevel(Math.round(Double.parseDouble(val))) // some thermostats will parse set points as double, 
        //so it needs to be rounded so as to be parsed as a string in the dimmer driver        
        descriptionText "$dimmer set to $val BY THIS APP"
    }
}
def virtualThermostat(need){

    def outsideTemperature = outsideTemp?.currentValue("temperature") // only needed if electric heater here
    def lowTemperature = lowtemp ? lowtemp : heatpump && !lowtemp ? 28 : 40
    boolean lowLimitReached = !thermostat ? true : (heater || heatpump) && (addLowTemp || heatpump) ? outsideTemperature < lowTemperature : true 
    //if heatpump, lowLimitReached is when it's too cold outside for a heatpump to remain efficient, or if threshold has been reached so the heater has to take over, if any...
    //if heater and no heatpump, lowLimitReached is when it's so cold that heater has to come and help
    //if heater AND no thermostat, heater runs all the time when needed, no low limit so lowLimitReached returns true

    /*    log.warn """
heatpump ? $heatpump
!thermostat ? ${!thermostat}
lowlimit reached ? $lowLimitReached
lowtemp = $lowtemp
outsideTemperature = $outsideTemperature
"""
*/
    if(heater)
    {
        boolean tooMuchPower = false
        if(controlPowerConsumption)
        {
            pollPowerMeters()
            def currentPower = pw?.currentValue("power").toInteger() + heater?.currentValue("power").toInteger()
            tooMuchPower = currentPower > maxPowerConsumption.toInteger()
            boolean wastrue = tooMuchPower
            tooMuchPower = devicePriority != "$heater" && heatpump && outsideTemperature < lowTemperature ? false : tooMuchPower
            if(wastrue && !tooMuchPower) // if was true but now is false
            {
                log.trace "both $thermostat and $heater are using too much power but heater needs to stay on due to outside temperature being too low for the heat pump to remain efficient. $thermostat should be off" 
            }
            // if device priority is not the heater while outside temp is low and heatpump true, we need to keep the heater on so tooMuchPower must be false
            // in the unlikely but still possible case where the thermostat is not already off 
        }
        if(tooMuchPower && devicePriority != "$heater") // if thermosat isn't priority it's overriden if it's a heatpump and low temp outside is true
        {
            need = "off"
            log.warn "$thermostat and $heater use too much power at the same time. Turning $heater off since $thermostat has precedence"
        }

        if(need == "heat")
        {
            if(lowLimitReached)
            {
                heater?.on() 
                logging "Turning on $heater "  
            }
            else
            {
                descriptionText "$heater not turning on because low temp limit outside hasn't been reached yet"
                logging("Turning $heater off")
                heater?.off()
            }

        }
        else 
        {
            logging("Turning $heater off")
            heater?.off()
        }
    }
    if(cooler)
    {
        if(need == "cool"){
            logging "turning $cooler on"
            cooler?.on()
        }
        else {
            logging "turning $cooler off"
            cooler?.off()
        }
    }
}
def windowsManagement(desired, simpleModeContactClosed, inside, outsideTemperature, humidity, swing, needCool, inWindowsModes, amplitudeTooHigh){

    if(controlWindows && windows && !simpleModeContactClosed && !atomicState.override)
    {
        def humThres = getHumidityThreshold() // linear equation: hum thres varies with outside temp
        boolean tooHumid = humidity >= 90 ? true : humidity >= humThres 
        boolean contactCapable = windows.any{it -> it.hasCapability("ContactSensor")}//?.size() == windows.size() 
        boolean someAreOff =  contactCapable ? (windows.findAll{it?.currentValue("contact") == "closed"}?.size() > 0) : (windows.findAll{it?.currentValue("switch") == "off"}?.size() > 0)
        boolean someAreOpen = contactCapable ? (windows.findAll{it?.currentValue("contact") == "open"}?.size() > 0) : (windows.findAll{it?.currentValue("switch") == "on"}?.size() > 0)
        boolean withinRange = outsideTemperature < outsidetempwindowsH && outsideTemperature > outsidetempwindowsL // stric temp value

        boolean outsideWithinRange = withinRange && !tooHumid // same as withinRange but with humidity

        atomicState.lastOpeningTime = atomicState.lastOpeningTime != null ? atomicState.lastOpeningTime : now() // make sure value is not null
        atomicState.outsideTempAtTimeOfOpening = atomicState.outsideTempAtTimeOfOpening  != null ? atomicState.outsideTempAtTimeOfOpening : outsideTemperature // make sure value is not null
        boolean outsideTempHasDecreased = outsideTemperature < atomicState.outsideTempAtTimeOfOpening - swing // serves mostly to reset opening time stamp
        atomicState.outsideTempAtTimeOfOpening = outsideTempHasDecreased ? outsideTemperature : atomicState.outsideTempAtTimeOfOpening // if outsideTempHasDecreased true, reset outsidetemAtTimeOfOpening stamp so to use outsideTempHasDecreased only once 
        atomicState.lastOpeningTime = outsideTempHasDecreased ? now() : atomicState.lastOpeningTime // reset opening time stamp if it got cooler outside, allowing more time to cool the room

        atomicState.insideTempAtTimeOfOpening = atomicState.insideTempAtTimeOfOpening ? atomicState.insideTempAtTimeOfOpening : inside // make sure value is not null
        boolean insideTempHasIncreased = inside > atomicState.insideTempAtTimeOfOpening + swing // serves for windows wider opening ONLY
        atomicState.insideTempHasIncreased = insideTempHasIncreased
        atomicState.widerOpeningDone = (atomicState.widerOpeningDone != null) ? atomicState.widerOpeningDone : (atomicState.widerOpeningDone = false) // make sure value is not null
        boolean openMore = !atomicState.widerOpeningDone && insideTempHasIncreased && someAreOpen

        boolean insideTempIsHopeLess = inside > atomicState.insideTempAtTimeOfOpening + 2 && atomicState.widerOpeningDone

        double lastOpeningTime = (now() - atomicState.lastOpeningTime) / 1000 / 60 
        lastOpeningTime = lastOpeningTime.round(2)
        boolean openSinceLong = lastOpeningTime > 15.0 && someAreOpen // been open for more than 15 minutes

        atomicState.lastClosingTime = atomicState.lastClosingTime ? atomicState.lastClosingTime : (atomicState.lastClosingTime = now()) // make sure value is not null
        double lastClosingTime = (now() - atomicState.lastClosingTime) / 1000 / 60 
        lastClosingTime = lastClosingTime.round(2)
        boolean closedSinceLong = lastClosingTime > 10.0 && someAreClosed // been open for more than 30 minutes

        boolean tooColdInside = inside <= desired - 4 //&& outside 
        //log.warn "tooColdInside = $tooColdInside : inside = $inside && desired = $desired"
        //closing error management for safety, if cmd didn't go through for whatever reason and temp went too low, force close the windows
        boolean exception = someAreOpen && ((atomicState.closedByApp && now() - lastClosingTime > 30 && tooColdInside) || (!outsideWithinRange && tooColdInside))
        long elapsed = now() - lastClosingTime
        def elapsedseconds = elapsed/1000
        def elapsedminutes = elapsed/1000/60
        if(exception) {log.warn "$windows still open! EMERGENCY CLOSING WILL BE ATTEMPTED"}


        //(inside > desired + (swing * 2) && openSinceLong) -> give it a chance to cool down the place
        boolean enoughTimeBetweenOpenAndClose = ((now() - atomicState.lastOpeningTime) / 1000 / 60) > 10.0 || inside < desired - swing //-> give it a chance to cool down the place
        boolean enoughTimeBetweenCloseAndOpen = ((now() - atomicState.lastClosingTime) / 1000 / 60) > 60.0 //-> don't reopen too soon after closing

        boolean needToClose = (enoughTimeBetweenOpenAndClose && ((inside > desired + (swing * 3) && openSinceLong) || inside < desired - swing || insideTempIsHopeLess)) || !outsideWithinRange
        boolean needToOpen = (enoughTimeBetweenCloseAndOpen && (inside > desired + swing && !needToClose)) && outsideWithinRange //|| amplitudeTooHigh) // timer ok, too hot inside + within range (acounting for humidity) and no discrepency

        //if need = cool while it's clearly cold outside, rather open windows than use AC
        boolean needToOpenForcedToTrue = false
        //needToOpen = !needToOpen && !tooHumid && needCool && outsideTemperature <= desired - 4 && enoughTimeBetweenCloseAndOpen ? true : needToOpen
        //needToOpenForcedToTrue = needToOpen 
        /*logging """
${!needToOpen}
$needCool
${outsideTemperature <= desired - 4}
$enoughTimeBetweenCloseAndOpen
${!needToOpen && needCool && outsideTemperature <= desired - 4 && enoughTimeBetweenCloseAndOpen}"""
*/

        if(INpwSavingMode)
        {
            needToOpen = outsideWithinRange && inside > criticalcold && inside < criticalhot  // in power saving mode open windows if within range and inside not too hot nor too cold
        }



        logging """<div style=\"width:102%;background-color:green;color:white;padding:4px;font-weight: bold;box-shadow: 1px 2px 2px #bababa;margin-left: -10px\">
**********************WINDOWS************************
inWindowsModes = $inWindowsModes
$windows ${!contactCapable ? "${(windows.size() > 1) ? "have":"has"} contact capability" : "${(windows.size() > 1) ? "don't have":"doesn't have"} contact capability"}
closed: ${windows.findAll{it?.currentValue("contact") == "closed"}}
Open: ${windows.findAll{it?.currentValue("contact") == "open"}}
atomicState.openByApp = $atomicState.openByApp
atomicState.closedByApp = $atomicState.closedByApp
withinRange (stritcly): $withinRange
humidity >= humThres  : ${humidity >= humThres}
outsideWithinRange = $outsideWithinRange [range: $outsidetempwindowsL <> $outsidetempwindowsH] ${tooHumid ? "Too humid" : ""}
insideTempHasIncreased = $insideTempHasIncreased
atomicState.outsideTempAtTimeOfOpening = $atomicState.outsideTempAtTimeOfOpening
atomicState.insideTempAtTimeOfOpening = $atomicState.insideTempAtTimeOfOpening
insideTempIsHopeLess = $insideTempIsHopeLess ${insideTempIsHopeLess ? "temp went from: $atomicState.outsideTempAtTimeOfOpening to $inside" : ""}
amplThreshold = $amplThreshold
someAreOff = $someAreOff
someAreOpen = $someAreOpen
last time windows were OPEN = at $atomicState.lastOpeningTimeStamp ${lastOpeningTime < 2 ? "less than 1 minute ago" : (lastOpeningTime < 60 ? "${lastOpeningTime} minutes ago" : (lastOpeningTime < 60*2 ? "${(lastOpeningTime/60).round(2)} hour ago" : "${(lastOpeningTime/60).round(2)} hours ago"))}
last time windows were CLOSED = $atomicState.lastClosingTimeStamp ${lastClosingTime < 2 ? "less than 1 minute ago" : (lastClosingTime < 60 ? "${lastClosingTime} minutes ago" : (lastClosingTime < 60*2 ? "${(lastClosingTime/60).round(2)} hour ago" : "${(lastClosingTime/60).round(2)} hours ago"))}
humThres = ${humThres}
humidity = ${humidity}%
tooHumid = $tooHumid
openMore = $openMore
inside > desired + (swing * 2) : ${inside > desired + (swing * 2)}
inside > desired + swing : ${inside > desired + swing}
inside < desired - swing       : ${inside < desired - swing}
enoughTimeBetweenOpenAndClose : $enoughTimeBetweenOpenAndClose
enoughTimeBetweenCloseAndOpen : $enoughTimeBetweenCloseAndOpen
lastOpeningTime = $lastOpeningTime minutes ago ${outsideTempHasDecreased ? "value was reset to 0 because outsideTempHasDecreased = true (outsideTempHasDecreased = $outsideTempHasDecreased" : ""}
lastClosingTime = $lastClosingTime minutes ago
openSinceLong = $openSinceLong
temperature at last window opening = $atomicState.outsideTempAtTimeOfOpening
now() = ${now()}
atomicState.lastOpeningTime = $atomicState.lastOpeningTime 
atomicState.outsideTempAtTimeOfOpening = $atomicState.outsideTempAtTimeOfOpening  
atomicState.widerOpeningDone = $atomicState.widerOpeningDone
atomicState.lastNeed = $atomicState.lastNeed

needToOpen = $needToOpen
needToClose = $needToClose


*****************************************************
</div>
"""
        def causeClosing = "${needToClose ? "WINDOWS CLOSED OR CLOSING BECAUSE: ${enoughTimeBetweenOpenAndClose && inside > desired + (swing * 2) && openSinceLong ? "enoughTimeBetweenOpenAndClose && inside > desired + (swing * 2) && openSinceLong" : inside < desired - swing ? "inside < desired - $swing" : !outsideWithinRange ? "!outsideWithinRange" : insideTempIsHopeLess ? "insideTempIsHopeLess" : !someAreOpen ? "Already closed" : atomicState.lastNeed == "heat" ? "atomicState.lastNeed = heat" : "FIRE THE DEVELOPER IF THIS MESSAGE SHOWS UP"}":""}"

        if(needToClose && !needToOpenForcedToTrue){logging "${formatText(causeClosing, white, grey)}"}
        if(needToOpenForcedToTrue){logging "needToOpenForcedToTrue set to $needToOpenForcedToTrue to prevent useless use of AC"}

        if(inWindowsModes || exception){

            def time = getWindowsTimeOfOperation(outsideTemperature)

            if(needToOpen) // outsideWithinRange and humidity level are accounted for in needToOpen boolean, unless in power saving mode
            {
                descriptionText "using $windows INSTEAD OF AC"

                if(someAreOff || openMore)
                {
                    if(openMore) {
                        atomicState.widerOpeningDone = true
                        unschedule(stop)
                    }
                    if(atomicState.closedByApp || (openMore && atomicState.openByApp))
                    {
                        def message = ""
                        if(onlySomeWindowsWillOpen && location.mode in modeSpecificWindows)
                        {
                            message = "opening $onlyThoseWindows ONLY"
                            def objectDevice
                            int i = 0
                            int s = windows.size() 
                            for(s!=0;i<s;i++)
                            {
                                if("${windows[i]}" in onlyThoseWindows)
                                {
                                    windows[i].on()
                                    //log.debug "${windows[i]} is the right device"
                                }
                            }
                            descriptionText message
                        }
                        else {
                            message = "opening $windows"
                            descriptionText message
                            windows.on()
                        }

                        if(doorsManagement && doorContactsAreOpen)
                        {
                            atomicState.otherWindowsOpenByApp = true
                            otherWindows?.on()
                        }
                        need0 = "off"
                        need1 = "off"
                        thermostat.setThermostatMode("off")
                        if(!openMore)
                        {
                            atomicState.lastOpeningTime = now()
                            atomicState.lastOpeningTimeStamp = new Date().format("h:mm:ss a", location.timeZone) // formated time stamp for debug purpose
                            atomicState.outsideTempAtTimeOfOpening = outsideTemperature
                            atomicState.insideTempAtTimeOfOpening = inside
                        }
                        atomicState.openByApp = true
                        atomicState.closedByApp = false

                        if(operationTime && !openMore && !INpwSavingMode) // if openMore or INpwSavingMode ignore stop() and open in full
                        {
                            runIn(time, stop)
                            message += " for a duration of $time seconds"
                        }
                        log.warn message

                    }
                    else
                    {
                        descriptionText "$windows were not closed by this app"
                    }
                }
                else
                {
                    descriptionText "$windows already open"
                }
            }
            else if(someAreOpen && needToClose)
            {
                if((atomicState.openByApp) || exception)
                {
                    if(exception) { log.warn "EXCEPTION CLOSING" }
                    log.warn "closing $windows"
                    unschedule(stop)
                    atomicState.lastClosingTime = now() 
                    atomicState.lastClosingTimeStamp = new Date().format("h:mm:ss a", location.timeZone) // formated time stamp for debug purpose
                    atomicState.widerOpeningDone = false // simple value reset
                    windows.off()
                    if(exception) {
                        if(windows.any{it.hasCapability("Switch Level")}){ windows.setLevel(100) }
                    }
                    if(doorsManagement && doorContactsAreOpen && otherWindows?.currentValue("switch") == "on" && atomicState.otherWindowsOpenByApp)
                    {
                        atomicState.otherWindowsOpenByApp = false
                        log.warn "closing $otherWindows"
                        otherWindows?.off()
                    }
                    atomicState.openByApp = false
                    atomicState.closedByApp = true
                }
                else if(!atomicState.openByApp)
                {
                    descriptionText "$windows were not open by this app"
                }
                else if(needToClose)
                {
                    descriptionText "$windows may close soon"
                }
                else 
                {
                    log.error "WINDOWS MANAGEMENT ERROR - fire the developper"
                }
            }
        }
        else if(windows && !inWindowsModes){
            descriptionText "outside of windows modes"
            if(someAreOpen && atomicState.openByApp) // && (inside > desired + 2 || inside < desired - 2 ))
            {
                windows.off()
                if(windows.any{it.hasCapability("Switch Level")}){ 
                    windows.setLevel(50) 
                }
                atomicState.openByApp = false
                atomicState.closedByApp = true
                if(doorsManagement && doorContactsAreOpen && otherWindows?.currentValue("switch") == "on")
                {
                    otherWindows?.off()
                    atomicState.otherWindowsOpenByApp = false
                }
            }
        }
        else if(windows && simpleModeContactClosed){
            logging "no windows management due to $simpleModeContact"
        }

    }
    else if(!windows) {
        logging "user did not select any window switch"
    }
    else if(simpleModeContactClosed)
    {
        descriptionText "skipping windows management due to simple mode trigger mode"
    }
    else if(atomicState.override)
    {
        descriptionText "Override mode because $thermostat is set to 'auto'"
    }


}

/************************************************DECISIONS******************************************************/
def getDesired(simpleModeActive){
    int desired = 70 // default value
    def inside = getInsideTemp()

    if(method == "auto")
    {
        desired = getAutoVal()
    }
    else
    {
        desired = dimmer?.currentValue("level")
    }

    // safety checkup for when alexa misinterpret a command to a light dimmer and applies it to the dimmer used by this app
    def maxHi = celcius ? getCelcius(88) : 88 // assuming no one would be stupid enough to set their thermostat to 88, if so it's interpreted as a problem by the app
    def minLow = celcius ? getCelcius(30) : 30 // same, but when setpoint is too low
    boolean problem = desired >= maxHi & lastNeed == "heat" ? true : desired <= minLow & lastNeed == "cool" ? true : false
    def lastNeed = atomicState.lastNeed
    logging """
maxAutoHeat = $maxAutoHeat
minAutoCool = $minAutoCool
maxHi = $maxHi
minLow = $minLow
dimmer value = ${dimmer?.currentValue("level")}
heatingSetpoint = ${thermostat.currentValue("heatingSetpoint")}
coolingSetpoint = ${thermostat.currentValue("coolingSetpoint")}
boolean problem = $desired >= $maxHi ? ${desired >= maxHi} : $desired <= $minLow ? ${desired <= minLow} : false
atomicState.lastNeed = $atomicState.lastNeed
problem detected : $problem
"""

    if(problem)
    {
        log.warn "There's a problem with current desired temperature ($desired). Readjusting from $thermostat setpoints"
        desired = thermostat.currentValue("thermostatSetpoint")
        // fix the dimmer's value if any dimmer
        dimmer?.setLevel(desired)
        log.warn "************ $app.name successfuly fixed its desired temperature data point! ********" 
    }
    problem = desired >= maxHi & lastNeed == "heat" ? true : desired <= minLow && lastNeed == "cool" ? true : false
    if(problem)
    {
        log.warn "${thermostat}'s values are as inconsistent as ${dimmer ? "${dimmer}'s" : "the previous'"}, meaning data retrieval failed. Applying safe values instead until next user's input"
        desired = celcius ? getCelcius(72) : 72 // safe value
    }

    if(simpleModeActive)
    {
        if(doorsContactsAreOpen() && overrideSimpleMode)
        {
            descriptionText "some doors are open: simple mode trigger mode ignored at user's request"
        }
        else if(setSpecialTemp || specialSubstraction)
        {       
            desired = specialSubstraction ? desired - substract : specialTemp

            descriptionText "desired temperature ${substract ? "(specialSubstraction)":"(specialTemp)"} is: $desired and last recorded temperature is ${inside}"
            return desired // END due to simple mode trigger mode
        }
        else
        {
            descriptionText "desired temperature is: $desired and last recorded temperature is ${inside}"
            return desired // return the default value
        }
    } 
    descriptionText "desired temperature is: $desired and current temperature is ${inside}"


    return desired
}
def getInsideHumidity(){

    def result 

    if(!optionalHumSensor)
    {
        // if  we tested with hasCapability() it could return true due to generic thermostat drivers, so we test null value instead
        result = thermostat?.currentValue("humidity") != null ? thermostat?.currentValue("humidity") : outsideTemp?.currentValue("humidity") 

        if(result == null) // if still null, force the user to review their settings
        {
            log.error formatText("NOR YOUR THERMOSTAT NOR YOUR OUTSIDE SENSOR SUPPORT HUMIDITY MEASUREMENT - PICK A DIFFERENT SENSOR IN YOUR SETTINGS", "black", "red")
        }
    }
    else
    {
        result = optionalHumSensor.currentValue("humidity")   
        if(result == null) // if still null, force the user to review their settings
        {
            log.warn formatText("$optionalHumSensor does not support humidity (beware of generic drivers!). - PICK A DIFFERENT SENSOR IN YOUR SETTINGS", "black", "red")
            result = thermostat?.currentValue("humidity") != null ? thermostat?.currentValue("humidity") : outsideTemp?.currentValue("humidity") 
            if(result != null)
            {
                log.warn formatText("This app is using ${thermostat?.currentValue("humidity") != null ? "$thermostat" : "$outsideTemp"} as a default humidity sensor in the mean time", "black", "red")
            }
            result = result == null ? 50 : result // temporary value as last resort
        }
    }
    descriptionText "Inside humidity is ${result}%"
}
def getNeed(desired, simpleModeContactClosed, inside){

    def humidity = outsideTemp?.currentValue("humidity") 
    def insideHum = getInsideHumidity() // backup for windows and value used for negative swing variation when cooling   
    humidity = humidity != null ? humidity : (insideHum != null ? insideHum : 50)
    boolean doorContactsAreOpen = doorsContactsAreOpen()
    boolean INpwSavingMode = powersavingmode && location.mode in powersavingmode && !simpleModeContactClosed && (!doorContactsAreOpen && doorsOverrideMotion)
    boolean inWindowsModes = windows && location.mode in windowsModes
    boolean contactClosed = !contactsAreOpen()  

    def outsideThres = getOutsideThershold()
    def outsideTemperature = outsideTemp.currentValue("temperature")
    def need0 = ""
    def need1 = ""
    def need = []
    def amplThreshold = 2
    def amplitude = Math.abs(inside - desired)
    def lo = celcius ? getCelcius(50) : 50
    def hi = celcius ? getCelcius(75) : 75
    def swing = outsideTemperature < lo  || outsideTemperature > hi ? 0.5 : 1 // lower swing when hot or cold outside
    def loCoolSw = celcius ? getCelcius(60) : 60
    def coolswing = insideHum < loCoolSw ? desired + swing : desired - swing // if too humid, swing down the threshold when cooling
    boolean amplitudeTooHigh = amplitude >= amplThreshold // amplitude between inside temp and desired / preventing amplitude paradox during mid-season

    boolean needCool = !simpleModeContactClosed ? (inWindowsModes ? outsideTemperature >= outsideThres && inside >= coolswing : outsideTemperature >= outsideThres && inside >= desired + swing) : outsideTemperature >= outsideThres + 5 && inside >= desired + swing

    logging"""
outsideTemperature >= outsideThres + 5 = ${outsideTemperature >= outsideThres + 5}
outsideTemperature = $outsideTemperature
outsideThres + 5 = ${outsideThres + 5}
needCool = $needCool
simpleModeContactClosed = $simpleModeContactClosed

"""
    boolean needHeat = !simpleModeContactClosed ? (outsideTemperature < outsideThres /* makes heat run during summer... || amplitudeTooHigh*/) && inside <= desired - swing : inside <= desired - swing && outsideTemperature < outsideThres

    //log.warn "inside = $inside inside >= desired + swing : ${inside >= desired + swing} |||needCool=$needCool"

    boolean motionActive = Active() || simpleModeContactClosed

    // shoulder season management: simple mode trigger forces ac to run despite cold outside if it gets too hot inside
    boolean norHeatNorCool = !needCool && !needHeat && inside > desired + swing && simpleModeContactClosed && outsideTemperature >= 55 ? true : false
    // the other room could be in an inadequate mode, which would be noticed by an undesirable temperature amplitude
    boolean unacceptable = doorContactsAreOpen && !atomicState.override && (inside < desired - 2 || inside > desired + 2) // if it gets too cold or too hot, ignore doorsManagement
    logging """inside = $inside 
desired = $desired 
$inside < ${desired - 2} : ${inside < desired - 2} 
$inside > ${desired + 2} : ${inside > desired + 2}
"""

    //log.warn "doorContactsAreOpen = $doorContactsAreOpen"
    if(unacceptable) // when doors are open, other room's thermostat manager might be in power saving mode
    {
        log.info formatText("UNACCEPTABLE TEMP - ignoring doors management sync", "red", "white")   
    }

    logging """
INpwSavingMode = $INpwSavingMode
contactClosed = $INpwSavingMode
motionActive = $INpwSavingMode
"""

    if(!unacceptable && doorsManagement && doorContactsAreOpen && contactClosed)
    {
        def n = doorThermostat?.currentValue("thermostatMode")
        need0 = n.capitalize() // capital letter for later construction of the setCoolingSetpoint cmd String
        need1 = n
        def message = "$doorsContacts ${doorsContacts.size() > 1 ? "are":"is"} open. $thermostat set to ${doorThermostat}'s mode ($n)"     
        descriptionText "<div style=\"width:102%;background-color:grey;color:white;padding:4px;font-weight: bold;box-shadow: 1px 2px 2px #bababa;margin-left: -10px\">$message</div>"         

    } 
    else if(!INpwSavingMode && contactClosed && motionActive)
    {
        if(needCool || needHeat || norHeatNorCool)
        {
            if(needCool || norHeatNorCool)
            {
                descriptionText "needCool true"
                need0 = "Cool"// capital letter for later construction of the setCoolingSetpoint cmd
                need1 = "cool"
                atomicState.lastNeed = need1
                logging("need and atomicState.lastNeed respectively set to ${[need0,need1]}")
            }
            if(needHeat) // heating need supercedes cooling need in order to prevent amplitude paradox
            {
                descriptionText "needHeat true"
                need0 = "Heat" // capital letter for later construction of the setHeatingSetpoint cmd
                need1 = "heat"
                atomicState.lastNeed = need1
                logging("need and atomicState.lastNeed respectively set to ${[need0,need1]}")
            }
        }
        else if(offrequiredbyuser)
        {
            need0 = "off"
            need1 = "off"
            logging("need set to OFF")
        }
        else if(!offrequiredbyuser)
        {
            need0 = atomicState.lastNeed.capitalize()
            need1 = atomicState.lastNeed
            descriptionText """Not turning off $thermostat at user's request (offrequiredbyuser = $offrequiredbyuser)
Temperature managed by unit's by thermostat's firmware directly
need0 = $need0
need1 = $need1
atomicState.lastNeed = $atomicState.lastNeed

"""
        }

        // log.warn "POWER SAVING MODE NOT ACTIVE" 
    }
    else   // POWER SAVING MODE OR NO MOTION OR CONTACTS OPEN     
    { 
        // log.warn "POWER SAVING MODE ACTIVE" 

        def cause = !motionActive ? "no motion" : (INpwSavingMode ? "power saving mode" : (!contactClosed ? "Contacts Open" : "UNKNOWN CAUSE - SPANK DEVELOPPER"))
        cause = cause == "Contacts Open" ? "${cause}: ${atomicState.listOfOpenContacts}" : cause
        def message = ""

        logging """
inside < criticalhot :  ${inside < criticalhot}
inside > criticalcold :  ${inside > criticalcold}

"""        
        need0 = "off"
        need1 = "off"

        if(inside > criticalhot)
        {
            if(!contactClosed) // if contacts open then just fan circulate
            {
                message = "<div style=\"width:102%;background-color:red;color:white;padding:4px;font-weight: bold;box-shadow: 1px 2px 2px #bababa;margin-left: -10px\">FAN CIRCULATE DUE TO EXCESSIVE HEAT AND CONTACTS OPEN: $atomicState.listOfOpenContacts</div>"
                if(fancirculate)
                {
                    thermostat.setThermostatFanMode("on")
                    atomicState.fanOn = true // this global is to ensure user's override
                }
                need0 = "off"
                need1 = "off"
            }
            else 
            {
                message = """<div style=\"width:102%;background-color:red;color:white;padding:4px;font-weight: bold;box-shadow: 1px 2px 2px #bababa;margin-left: -10px\">POWER SAVING MODE EXPCETION: TOO HOT! ($cause)</div>"""
                need0 = "Cool"
                need1 = "cool"
            }
        }
        else
        {
            thermostat.setThermostatFanMode("auto")
            atomicState.fanOn = false
        }

        if(inside < criticalcold)
        {
            message = """<div style=\"width:102%;background-color:blue;color:white;padding:4px;font-weight: bold;box-shadow: 1px 2px 2px #bababa;margin-left: -10px\">POWER SAVING MODE EXPCETION: TOO COLD! ($cause)</div>"""
            need0 = "Heat"
            need1 = "heat"
        }
        else 
        {
            message = """<div style=\"width:102%;background-color:blue;color:white;padding:4px;font-weight: bold;box-shadow: 1px 2px 2px #bababa;margin-left: -10px\">POWER SAVING MODE ($cause)</div>"""
        }
        log.warn message

    }

    windowsManagement(desired, simpleModeContactClosed, inside, outsideTemperature, humidity, swing, needCool, inWindowsModes, amplitudeTooHigh)

    logging"""
simpleModeContactClosed = $simpleModeContactClosed
doorContactsAreOpen = $doorContactsAreOpen
!overrideSimpleMode = ${!overrideSimpleMode}
simpleModeIsActive() = ${simpleModeIsActive()}
"""

    if(UseSimpleMode && ((simpleModeContactClosed && !doorContactsAreOpen) || (!doorContactsAreOpen && !overrideSimpleMode && simpleModeContactClosed)))
    {
        log.info "<div style=\"width:102%;background-color:grey;color:white;padding:4px;font-weight: bold;box-shadow: 1px 2px 2px #bababa;margin-left: -10px\">Simple Mode Enabled</div>"
    }
    else if(UseSimpleMode && simpleModeContactClosed && overrideSimpleMode && doorsOpen)
    {
        log.info "<div style=\"width:102%;background-color:grey;color:white;padding:4px;font-weight: bold;box-shadow: 1px 2px 2px #bababa;margin-left: -10px\">Simple Mode Called but NOT active due to doors being open</div>"
    }
    else if(UseSimpleMode)
    {
        descriptionText "<div style=\"width:102%;background-color:grey;color:white;padding:4px;font-weight: bold;box-shadow: 1px 2px 2px #bababa;margin-left: -10px\">Simple Mode Disabled</div>"
    }

    need = [need0, need1]

    descriptionText "current need: ${need1 != "off" ? "${need1}ing" : need1}"

    logging"""<div style=\"width:102%;background-color:#1C2BB7;color:white;padding:4px;font-weight: bold;box-shadow: 1px 2px 2px #bababa;margin-left: -10px\">
--------------NEED---------------------
inWindowsModes = $inWindowsModes
power saving management= ${powersavingmode ? "$powersavingmode INpwSavingMode = $INpwSavingMode":"option not selected by user"}
amplitude = $amplitude
amplitudeTooHigh = $amplitudeTooHigh

humidity = ${humidity}%
insideHum = ${insideHum}%

outside = $outsideTemperature
inside = $inside
desired = $desired

swing = $swing
coolswing = $coolswing

inside > coolswing = ${inside > coolswing}
inside > desired = ${inside > desired}
inside < desired = ${inside < desired}

simpleModeContactClosed = $simpleModeContactClosed (simpleModeTriggerType = $simpleModeTriggerType)
contactClosed = $contactClosed (open = $atomicState.listOfOpenContacts)
outsideThres = $outsideThres
outsideTemperature > desired = ${outsideTemperature > desired}
outsideTemperature < desired = ${outsideTemperature < desired}
outsideTemperature >= outsideThres = ${outsideTemperature >= outsideThres}
outsideTemperature < outsideThres = ${outsideTemperature < outsideThres}

needCool = $needCool
needHeat = $needHeat (needHeat supercedes needCool) 

final NEED value = $need
---------------------------------------
</div>
"""

    return need

}
def getAutoVal(){

    def outside = outsideTemp?.currentValue("temperature") 
    def need = outside >= getOutsideThershold() ? "cool" : "heat"
    def result = celcius ? getCelcius(73):73 // just a temporary default value   
    //def humidity = outsideTemp?.currentValue("humidity") // outside humidity
    def humidity = getInsideHumidity() // in auto mode we evaluate based only on inside humidity
    humidity = humidity != null ? humidity : 50 // assume 50 as a temporary value to prevent errors when a has just been installed by user and humidity value has yet to be parsed

    def humThres = getHumidityThreshold() // linear equation: hum thres varies with outside temp

    def variation = getVariationAmplitude(outside, need)

    descriptionText "variation amplitude = $variation | absolute need (auto method, not from getNeed()) is $need "

    result = need == "cool" ? humidity >= humThres ? outside - variation + 1 : outside - variation : need == "heat" ? humidity >= humThres ? outside + variation + 1 : outside + variation : "ERROR"


    if(result == "ERROR") { 
        log.error """ERROR at getAutoVal()
need = $need
atomicState.lastNeed = $atomicState.lastNeed
humidity = $humidity
insideHum = $insideHum
humThres = $humThres
outside = $outside
""" 
        return 73
    }

    def hiCool = celcius ? getCelcius(77) : 77
    def loCool = celcius ? getCelcius(70) : 70
    def hiHeat = celcius ? getCelcius(75) : 75
    def loHeat = celcius ? getCelcius(70) : 70
    def maxAH = maxAutoHeat != null ? maxAutoHeat : hiHeat
    def minAC = minAutoCool != null ? minAutoCool : loCool
    def minAH = minAutoHeat != null ? minAutoHeat : loHeat
    def maxAC = maxAutoCool != null ? maxAutoCool : hiCool

    logging """
maxAH = $maxAH
minAC = $minAC
minAH = $minAH
maxAC = $maxAC
"""

    result = result > maxAH && need == "heat" ? maxAH : result // in this scope need is always either "cool" or "heat", never "off" so these conditions won't be ignored
    result = result < minAC && need == "cool" ? minAC : result
    result = result < minAH && need == "heat" ? minAH : result
    result = result > maxAC && need == "cool" ? maxAC : result

    descriptionText "desired temperature (auto) in this room is: $result (${humidity > humThres ? "humid condition true" : "humid condition false"}(${humidity}%) | outside temp: $outside) "
    return result
}
def getVariationAmplitude(outside, need){

    //https://www.desmos.com/calculator/uc9391tw1f

    def y = 0 // value to find
    def x = outside // current temperature outside
    def ya = desiredVar != null ? desiredVar : 1 // coressponding difference required when outside temperature = xa
    ya = ya.toFloat()
    def xa = refTemp != null ? refTemp : 77 // 
    xa = xa.toFloat()
    def slope = 0.8
    def m = need == "cool" ? slope : (slope + 0.1)*-1  // slope 
    //def a = -1 // offset

    y = m*(x-xa)+ya // solving y-ya = m*(x-xa)

    logging """
y = $y
outside = $outside
outside instance of String ? ${outside instanceof String}
ya instance of String ? ${ya instanceof String}
slope instance of String ? ${slope instanceof String}
y instanceof String ? ${y instanceof String}
"""
    //y = y < max ? y : max // deprecated
    y = y < 1 ? 1 : y

    logging "linear result for amplitude variation for auto temp = ${y.toInteger()}"
    return y.toInteger()

}
def getWindowsTimeOfOperation(outsideTemperature){

    def max = maxDuration ? maxDuration : 2000

    def y = null // value to find
    def x = outsideTemperature // current temperature outside
    def ya = windowsDuration ? windowsDuration : 10 // minimal duration // coressponding duration for when outside temperature = xa
    def xa = outsidetempwindowsL // minimal operation temperature
    def m = 0.9 // slope / coef

    y = m*(x-xa)+ya // solving y-ya = m*(x-xa)
    y = y < max ? y : max

    logging "linear result for windows duration = ${y.toInteger()} seconds"
    return y.toInteger()
}
def getInsideTemp(){

    def inside = thermostat?.currentValue("temperature") 

    if(sensor)
    {
        def sum = 0
        int i = 0
        int s = sensor.size()
        for(s != 0; i<s;i++)
        {
            def val = sensor[i]?.currentValue("temperature")
            logging "--${sensor[i]} temperature is: $val"
            sum += val
        }

        inside = sum/s
    }
    else if(doorsManagement && doorsContactsAreOpen() && doorSetOfSensors && useDifferentSetOfSensors)
    {
        def sum = 0
        int i = 0
        int s = doorSetOfSensors.size()
        for(s != 0; i<s;i++)
        {
            def val = doorSetOfSensors[i]?.currentValue("temperature")
            descriptionText "**${doorSetOfSensors[i]} temperature is: $val"
            sum += val
        }

        inside = sum/s
    }

    descriptionText "average temperature in this room is: $inside"
    inside = inside.toDouble()
    inside = inside.round(2)
    atomicState.inside = inside
    return inside
}
def getOutsideThershold(){

    // define the outside temperature as of which heating or cooling are respectively required 
    // modulated with outside humidity 

    def humidity = outsideTemp?.currentValue("humidity") 
    humidity = humidity != null ? humidity : celcius ? getCelcius(50):50 // prevents error from recently installed thermostats
    if(humidity == null){
        def message = """$outsideTemp is not returning any humdity value - it may be because it was just included; if so, this will resolve ont its own.
If this message still shows within an hour, check your thermostat configuration..."""
        log.warn """<div style=\"width:102%;background-color:red;color:white;padding:4px;font-weight: bold;box-shadow: 1px 2px 2px #bababa;margin-left: -10px\">$message</div>"""
    }
    def outsideTemperature = outsideTemp?.currentValue("temperature")

    // the higher the humidity, the lower the threshold so cooling can happen 
    def y = null // value to find
    def x = humidity 
    def ya = celcius ? getCelcius(60):60 // coressponding outside temperature value for when humidity = xa 
    def xa = celcius ? getCelcius(60):60 // humidity level
    def m = -0.1 // slope / coef

    y = m*(x-xa)+ya // solving y-ya = m*(x-xa)
    //log.warn "y = $y"
    def lo = celcius ? getCelcius(68):68
    def hi = celcius ? getCelcius(60):60
    def result = y > hi ? hi : (y < lo ? lo : y) // max and min

    descriptionText "cool/heat decision result = ${y != result ? "$result (corrected from y=$y)" : "$result"} (humidity being ${humidity < 40 ? "low at ${humidity}%" : "high at ${humidity}%"})"
    return result


}
def getHumidityThreshold(){ // must be called only upon windows opening decision
    def humidity = outsideTemp?.currentValue("humidity") 
    humidity = humidity != null ? humidity : celcius ? getCelcius(50):50
    def outsideTemperature = outsideTemp?.currentValue("temperature")

    // we want to set a humidity threshold depending on outside temperature
    // humidity of 98, even an outside temp of 70 will feel too warm so we don't open the windows
    // but humidity of 98 at 60F, it's ok to use outside air to cool down the house

    def y = null // value to find
    def x = outsideTemperature 
    def ya = celcius ? getCelcius(70):70 // coressponding humidity threshold for when humidity = xa
    def xa = celcius ? getCelcius(70):70
    def m = -3 // slope / coef

    y = m*(x-xa)+ya // solving y-ya = m*(x-xa)
    //y = y >= 78 ? 

    return y

}
def getLastMotionEvents(Dtime, testType){
    int s = motionSensors.size() 
    int i = 0
    def thisDeviceEvents = []
    int events = 0
    for(s != 0; i < s; i++) // collect active events
    { 
        def device = motionSensors[i]                
        thisDeviceEvents = device.eventsSince(new Date(now() - Dtime)).findAll{it.value == "active"} // collect motion events for each sensor separately
        logging "Collected ${thisDeviceEvents.size()} evts for $device"
        events += thisDeviceEvents.size() 
    }
    descriptionText "$events active events in the last ${noMotionTime} minutes ($testType)"
    return events
}
def getRemainTime(timeLimit, timeStamp){

    timeLimit = timeLimit.toInteger() * 60 * 60 * 1000
    long elapsedTime = now() - timeStamp // total elapsed time since last true event and now

    if(elapsedTime > timeLimit)
    {
        return 0
    }

    // get the remaining time given the time limit
    float minutes = (timeLimit - elapsedTime)/1000/60 // remaining minutes
    float hours = (timeLimit - elapsedTime)/1000/60/60 // remaining hours
    float remain = minutes >= 60 ? hours : minutes // decision hours/minutes
    def unit = minutes >= 60 ? "hours" : "minutes"

    log.debug """
timeLlimit = $timeLimit
timeStamp = $timeStamp
(now() - timeStamp)/1000/60 = ${(now() - timeStamp)/1000/60} minutes
elapsedTime = $elapsedTime
//REMAINING TIME in minutes, hours
minutes = $minutes
hours = $hours
remain = $remain
unit = $unit 
"""

    return "${Math.round(remain)} $unit"
}
def getCelcius(int value){
    def C = (value - 32) * (5/9) 
    descriptionText "${value}F converted to ${C}C"
    return C
}
/************************************************BOOLEANS******************************************************/
boolean contactsAreOpen(){
    boolean Open = false
    def listOpen = []

    if(WindowsContact)
    {
        atomicState.lastOpenEvt = atomicState.lastOpenEvt != null ? atomicState.lastOpenEvt : now()
        def deltaTime = openDelay != null ? openDelay : 30 
        listOpen = WindowsContact?.findAll{it?.currentValue("contact") == "open"}     
        atomicState.listOfOpenContacts = "$listOpen"
        def messageText = "${listOpen.size() > 0 ? "Some contacts are open : $atomicState.listOfOpenContacts" : "all contacts closed"}"
        if(listOpen.size() > 0)
        {
            log.warn messageText
        }
        else 
        {
            logging messageText
        }
        Open = listOpen.size() > 0 && now() - atomicState.lastOpenEvt > deltaTime * 1000
    }
    else
    {
        logging "NO CONTACTS"
    }

    logging """contacts: $contact open ?: ${listOpen}"""
    return Open
}
boolean simpleModeIsActive(){
    atomicState.lastButtonEvent = atomicState.lastButtonEvent != null ? atomicState.lastButtonEvent : now()
    boolean result =  atomicState.lastResultWasTrue 
    //boolean doorOpen = doorsContactsAreOpen() // FEEDBACK LOOP since doorsContactsAreOpen() function calls simpleModeIsActive()
    boolean currentlyClosed = false 

    if(UseSimpleMode)
    {
        result = atomicState.buttonPushed      
    }
    if(simpleModeTimeLimit && atomicState.buttonPushed) // if user set a time limit
    {     
        def remainTime = getRemainTime(simpleModeTimeLimit, atomicState.lastButtonEvent)
        def message = "SIMPLE MODE - remaining time: ${remainTime}"
        descriptionText formatText(message, "white", "grey")

        if(remainTime <= 0) // time is up
        {
            result = false 
            atomicState.buttonPushed = false
        }
    }

    logging"simple mode trigger boolean returns $result"   

    return result
}
boolean doorsContactsAreOpen(){
    boolean Open = false
    def listOpen = []

    if(doorsContacts)
    {
        listOpen = doorsContacts?.findAll{it?.currentValue("contact") == "open"}
        Open = listOpen.size() > 0
    }
    if(Open && !overrideSimpleMode && simpleModeIsActive())
    {
        descriptionText "$doorsContacts open but $simpleModeContact is closed and user doesn't wish to override"
        return false
    }

    logging """doors: $doorsContacts open ?: ${listOpen}"""
    return Open
}
boolean Active(){
    boolean result = true // default is true  always return Active = true when no sensor is selected by the user

    if(motionSensors)
    {
        long Dtime = noMotionTime * 1000 * 60
        boolean inMotionMode = location.mode in motionmodes
        logging "inMotionMode = $inMotionMode"

        if(inMotionMode)
        {
            result = getLastMotionEvents(Dtime, "motionTest") > 0
        }
        else 
        {
            logging("motion returns true because outside of motion modes")
        }
        Dtime = 60 * 60 * 1000 
        if(getLastMotionEvents(Dtime, "overrideTest")) // if no motion for over one hour then save power by resetting windows override
        {
            //atomicState.openByApp = true
            atomicState.closedByApp = true
        }
    }
    else 
    {
        logging("user did not select any motion sensor")
    }
    descriptionText "motion test returns $result"
    return result
}
/************************************************MISCELANEOUS*********************************************************/
def stop(){

    if(customCommand)
    {

        def cmd = customCommand.minus("()")
        int s = windows.size()
        int i = 0
        for(s!=0;i<s;i++)
        {
            windows[i]."${cmd}"()
            log.warn "${windows[i]} $customCommand"
        }
        if(doorsManagement && doorContactsAreOpen && atomicState.otherWindowsOpenByApp)
        {
            s = otherWindows.size()
            i = 0
            for(s!=0;i<s;i++)
            {
                otherWindows[i]."${cmd}"()
                log.warn "${otherWindows[i]} $customCommand"
            }
        }
    }

}
def Poll(){
    if(location.mode in restricted){
        descriptionText "location in restricted mode, doing nothing"
        return
    } 
    if(atomicState.paused == true)
    {
        return
    }

    boolean override = atomicState.override   
    boolean thermPoll = thermostat.hasCommand("poll")
    boolean thermRefresh = thermostat.hasCommand("refresh") 
    boolean outsidePoll = outsideTemp.hasCommand("poll")
    boolean outsideRefresh = outsideTemp.hasCommand("refresh") 

    boolean coolerPoll = cooler?.hasCommand("poll")
    boolean coolerRefresh = cooler?.hasCommand("refresh") 



    if(thermRefresh){
        thermostat.refresh()
        descriptionText("refreshing $thermostat")
    }
    if(thermPoll){
        thermostat.poll()
        descriptionText("polling $thermostat")
    }
    if(outsideRefresh){
        outsideTemp.refresh()
        descriptionText("refreshing $outsideTemp")
    }
    if(outsidePoll){
        outsideTemp.poll()
        descriptionText("polling $outsideTemp")
    }

    if(coolerRefresh){
        cooler?.refresh()
        descriptionText("refreshing $cooler")
    }
    if(coolerPoll){
        cooler?.poll()
        descriptionText("polling $cooler")
    }



    if(sensor)
    {
        boolean sensorPoll = sensor.findAll{it.hasCommand("poll")}.size() == sensor.size()
        boolean sensorRefresh = sensor.findAll{it.hasCommand("refresh")}.size() == sensor.size()

        if(sensorRefresh){
            int i = 0
            int s = sensor.size()
            for(s!=0;i<s;i++)
            {
                sensor[i].refresh()
                descriptionText("refreshing ${sensor[i]}")
            }
        }
        if(sensorPoll){
            int i = 0
            int s = sensor.size()
            for(s!=0;i<s;i++)
            {
                sensor[i].poll()
                descriptionText("polling ${sensor[i]}")
            }
        }
    }

    if(pwRefresh){
        pw.refresh()
        descriptionText("refreshing $pw")
    }
    if(pwPoll){
        sensor.poll()
        descriptionText("polling $pw")
    }

    if(windows)
    {
        boolean windowsPoll = windows.findAll{it.hasCommand("poll")}.size() == windows.size()
        boolean windowsRefresh = windows.findAll{it.hasCommand("refresh")}.size() == windows.size()

        if(windowsRefresh){
            int i = 0
            int s = windows.size()
            for(s!=0;i<s;i++)
            {
                def dev = windows[i]
                dev.refresh()
                descriptionText("refreshing $dev")
            }
        }
        if(windowsPoll){
            int i = 0
            int s = windows.size()
            for(s!=0;i<s;i++)
            {
                def dev = windows[i]
                dev.refresh()
                descriptionText("refreshing $dev")
            }
        }
    }

    pollPowerMeters()

}
def pollPowerMeters(){
    boolean heaterPoll = heater?.hasCommand("poll")
    boolean heaterRefresh = heater?.hasCommand("refresh") 
    boolean pwPoll = pw?.hasCommand("poll")
    boolean pwRefresh = pw?.hasCommand("refresh") 

    if(pwRefresh){
        pw.refresh()
        descriptionText("refreshing $pw")
    }
    if(pwPoll){
        pw.poll()
        descriptionText("polling $pw")
    }
    if(heaterRefresh){
        heater?.refresh()
        descriptionText("refreshing $heater")
    }
    if(heaterPoll){
        heater?.poll()
        descriptionText("polling $heater")
    }

}
def logging(message){
    if(enabledebug)
    {
        log.debug message
    }
    atomicState.EnableDebugTime = atomicState.EnableDebugTime == null ? atomicState.EnableDebugTime = now() : atomicState.EnableDebugTime
    atomicState.enableDescriptionTime = atomicState.enableDescriptionTime == null ? atomicState.enableDescriptionTime = now() : atomicState.enableDescriptionTime
}
def descriptionText(message){
    if(description)
    {
        log.info message
    }
}
def disablelogging(){
    log.warn "debug logging disabled..."
    app.updateSetting("enabledebug",[value:"false",type:"bool"])
}
def disabledescription(){
    log.warn "description text disabled..."
    app.updateSetting("description",[value:"false",type:"bool"])
}
def formatText(title, textColor, bckgColor){
    return  "<div style=\"width:102%;background-color:${bckgColor};color:${textColor};padding:4px;font-weight: bold;box-shadow: 1px 2px 2px #bababa;margin-left: -10px\">${title}</div>"
}
